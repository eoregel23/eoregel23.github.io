/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1810.0, "minX": 0.0, "maxY": 11602.0, "series": [{"data": [[0.0, 2741.0], [0.1, 2741.0], [0.2, 2741.0], [0.3, 2741.0], [0.4, 2741.0], [0.5, 2741.0], [0.6, 2741.0], [0.7, 2766.0], [0.8, 2766.0], [0.9, 2766.0], [1.0, 2766.0], [1.1, 2766.0], [1.2, 2766.0], [1.3, 2766.0], [1.4, 2820.0], [1.5, 2820.0], [1.6, 2820.0], [1.7, 2820.0], [1.8, 2820.0], [1.9, 2820.0], [2.0, 2861.0], [2.1, 2861.0], [2.2, 2861.0], [2.3, 2861.0], [2.4, 2861.0], [2.5, 2861.0], [2.6, 2861.0], [2.7, 3033.0], [2.8, 3033.0], [2.9, 3033.0], [3.0, 3033.0], [3.1, 3033.0], [3.2, 3033.0], [3.3, 3033.0], [3.4, 3034.0], [3.5, 3034.0], [3.6, 3034.0], [3.7, 3034.0], [3.8, 3034.0], [3.9, 3034.0], [4.0, 3345.0], [4.1, 3345.0], [4.2, 3345.0], [4.3, 3345.0], [4.4, 3345.0], [4.5, 3345.0], [4.6, 3345.0], [4.7, 3413.0], [4.8, 3413.0], [4.9, 3413.0], [5.0, 3413.0], [5.1, 3413.0], [5.2, 3413.0], [5.3, 3413.0], [5.4, 3836.0], [5.5, 3836.0], [5.6, 3836.0], [5.7, 3836.0], [5.8, 3836.0], [5.9, 3836.0], [6.0, 3975.0], [6.1, 3975.0], [6.2, 3975.0], [6.3, 3975.0], [6.4, 3975.0], [6.5, 3975.0], [6.6, 3975.0], [6.7, 4058.0], [6.8, 4058.0], [6.9, 4058.0], [7.0, 4058.0], [7.1, 4058.0], [7.2, 4058.0], [7.3, 4058.0], [7.4, 4114.0], [7.5, 4114.0], [7.6, 4114.0], [7.7, 4114.0], [7.8, 4114.0], [7.9, 4114.0], [8.0, 4317.0], [8.1, 4317.0], [8.2, 4317.0], [8.3, 4317.0], [8.4, 4317.0], [8.5, 4317.0], [8.6, 4317.0], [8.7, 4361.0], [8.8, 4361.0], [8.9, 4361.0], [9.0, 4361.0], [9.1, 4361.0], [9.2, 4361.0], [9.3, 4361.0], [9.4, 4371.0], [9.5, 4371.0], [9.6, 4371.0], [9.7, 4371.0], [9.8, 4371.0], [9.9, 4371.0], [10.0, 4413.0], [10.1, 4413.0], [10.2, 4413.0], [10.3, 4413.0], [10.4, 4413.0], [10.5, 4413.0], [10.6, 4413.0], [10.7, 4598.0], [10.8, 4598.0], [10.9, 4598.0], [11.0, 4598.0], [11.1, 4598.0], [11.2, 4598.0], [11.3, 4598.0], [11.4, 4624.0], [11.5, 4624.0], [11.6, 4624.0], [11.7, 4624.0], [11.8, 4624.0], [11.9, 4624.0], [12.0, 4665.0], [12.1, 4665.0], [12.2, 4665.0], [12.3, 4665.0], [12.4, 4665.0], [12.5, 4665.0], [12.6, 4665.0], [12.7, 4671.0], [12.8, 4671.0], [12.9, 4671.0], [13.0, 4671.0], [13.1, 4671.0], [13.2, 4671.0], [13.3, 4671.0], [13.4, 4704.0], [13.5, 4704.0], [13.6, 4704.0], [13.7, 4704.0], [13.8, 4704.0], [13.9, 4704.0], [14.0, 4760.0], [14.1, 4760.0], [14.2, 4760.0], [14.3, 4760.0], [14.4, 4760.0], [14.5, 4760.0], [14.6, 4760.0], [14.7, 4800.0], [14.8, 4800.0], [14.9, 4800.0], [15.0, 4800.0], [15.1, 4800.0], [15.2, 4800.0], [15.3, 4800.0], [15.4, 4889.0], [15.5, 4889.0], [15.6, 4889.0], [15.7, 4889.0], [15.8, 4889.0], [15.9, 4889.0], [16.0, 4935.0], [16.1, 4935.0], [16.2, 4935.0], [16.3, 4935.0], [16.4, 4935.0], [16.5, 4935.0], [16.6, 4935.0], [16.7, 5064.0], [16.8, 5064.0], [16.9, 5064.0], [17.0, 5064.0], [17.1, 5064.0], [17.2, 5064.0], [17.3, 5064.0], [17.4, 5121.0], [17.5, 5121.0], [17.6, 5121.0], [17.7, 5121.0], [17.8, 5121.0], [17.9, 5121.0], [18.0, 5141.0], [18.1, 5141.0], [18.2, 5141.0], [18.3, 5141.0], [18.4, 5141.0], [18.5, 5141.0], [18.6, 5141.0], [18.7, 5300.0], [18.8, 5300.0], [18.9, 5300.0], [19.0, 5300.0], [19.1, 5300.0], [19.2, 5300.0], [19.3, 5300.0], [19.4, 5306.0], [19.5, 5306.0], [19.6, 5306.0], [19.7, 5306.0], [19.8, 5306.0], [19.9, 5306.0], [20.0, 5468.0], [20.1, 5468.0], [20.2, 5468.0], [20.3, 5468.0], [20.4, 5468.0], [20.5, 5468.0], [20.6, 5468.0], [20.7, 5483.0], [20.8, 5483.0], [20.9, 5483.0], [21.0, 5483.0], [21.1, 5483.0], [21.2, 5483.0], [21.3, 5483.0], [21.4, 5501.0], [21.5, 5501.0], [21.6, 5501.0], [21.7, 5501.0], [21.8, 5501.0], [21.9, 5501.0], [22.0, 5501.0], [22.1, 5623.0], [22.2, 5623.0], [22.3, 5623.0], [22.4, 5623.0], [22.5, 5623.0], [22.6, 5623.0], [22.7, 5633.0], [22.8, 5633.0], [22.9, 5633.0], [23.0, 5633.0], [23.1, 5633.0], [23.2, 5633.0], [23.3, 5633.0], [23.4, 5637.0], [23.5, 5637.0], [23.6, 5637.0], [23.7, 5637.0], [23.8, 5637.0], [23.9, 5637.0], [24.0, 5637.0], [24.1, 5647.0], [24.2, 5647.0], [24.3, 5647.0], [24.4, 5647.0], [24.5, 5647.0], [24.6, 5647.0], [24.7, 5933.0], [24.8, 5933.0], [24.9, 5933.0], [25.0, 5933.0], [25.1, 5933.0], [25.2, 5933.0], [25.3, 5933.0], [25.4, 6001.0], [25.5, 6001.0], [25.6, 6001.0], [25.7, 6001.0], [25.8, 6001.0], [25.9, 6001.0], [26.0, 6001.0], [26.1, 6023.0], [26.2, 6023.0], [26.3, 6023.0], [26.4, 6023.0], [26.5, 6023.0], [26.6, 6023.0], [26.7, 6026.0], [26.8, 6026.0], [26.9, 6026.0], [27.0, 6026.0], [27.1, 6026.0], [27.2, 6026.0], [27.3, 6026.0], [27.4, 6101.0], [27.5, 6101.0], [27.6, 6101.0], [27.7, 6101.0], [27.8, 6101.0], [27.9, 6101.0], [28.0, 6101.0], [28.1, 6381.0], [28.2, 6381.0], [28.3, 6381.0], [28.4, 6381.0], [28.5, 6381.0], [28.6, 6381.0], [28.7, 6409.0], [28.8, 6409.0], [28.9, 6409.0], [29.0, 6409.0], [29.1, 6409.0], [29.2, 6409.0], [29.3, 6409.0], [29.4, 6425.0], [29.5, 6425.0], [29.6, 6425.0], [29.7, 6425.0], [29.8, 6425.0], [29.9, 6425.0], [30.0, 6425.0], [30.1, 6450.0], [30.2, 6450.0], [30.3, 6450.0], [30.4, 6450.0], [30.5, 6450.0], [30.6, 6450.0], [30.7, 6465.0], [30.8, 6465.0], [30.9, 6465.0], [31.0, 6465.0], [31.1, 6465.0], [31.2, 6465.0], [31.3, 6465.0], [31.4, 6502.0], [31.5, 6502.0], [31.6, 6502.0], [31.7, 6502.0], [31.8, 6502.0], [31.9, 6502.0], [32.0, 6502.0], [32.1, 6516.0], [32.2, 6516.0], [32.3, 6516.0], [32.4, 6516.0], [32.5, 6516.0], [32.6, 6516.0], [32.7, 6694.0], [32.8, 6694.0], [32.9, 6694.0], [33.0, 6694.0], [33.1, 6694.0], [33.2, 6694.0], [33.3, 6694.0], [33.4, 6751.0], [33.5, 6751.0], [33.6, 6751.0], [33.7, 6751.0], [33.8, 6751.0], [33.9, 6751.0], [34.0, 6751.0], [34.1, 6775.0], [34.2, 6775.0], [34.3, 6775.0], [34.4, 6775.0], [34.5, 6775.0], [34.6, 6775.0], [34.7, 6824.0], [34.8, 6824.0], [34.9, 6824.0], [35.0, 6824.0], [35.1, 6824.0], [35.2, 6824.0], [35.3, 6824.0], [35.4, 6842.0], [35.5, 6842.0], [35.6, 6842.0], [35.7, 6842.0], [35.8, 6842.0], [35.9, 6842.0], [36.0, 6842.0], [36.1, 6950.0], [36.2, 6950.0], [36.3, 6950.0], [36.4, 6950.0], [36.5, 6950.0], [36.6, 6950.0], [36.7, 6950.0], [36.8, 6950.0], [36.9, 6950.0], [37.0, 6950.0], [37.1, 6950.0], [37.2, 6950.0], [37.3, 6950.0], [37.4, 6986.0], [37.5, 6986.0], [37.6, 6986.0], [37.7, 6986.0], [37.8, 6986.0], [37.9, 6986.0], [38.0, 6986.0], [38.1, 7331.0], [38.2, 7331.0], [38.3, 7331.0], [38.4, 7331.0], [38.5, 7331.0], [38.6, 7331.0], [38.7, 7334.0], [38.8, 7334.0], [38.9, 7334.0], [39.0, 7334.0], [39.1, 7334.0], [39.2, 7334.0], [39.3, 7334.0], [39.4, 7344.0], [39.5, 7344.0], [39.6, 7344.0], [39.7, 7344.0], [39.8, 7344.0], [39.9, 7344.0], [40.0, 7360.0], [40.1, 7360.0], [40.2, 7360.0], [40.3, 7360.0], [40.4, 7360.0], [40.5, 7360.0], [40.6, 7360.0], [40.7, 7551.0], [40.8, 7551.0], [40.9, 7551.0], [41.0, 7551.0], [41.1, 7551.0], [41.2, 7551.0], [41.3, 7551.0], [41.4, 7606.0], [41.5, 7606.0], [41.6, 7606.0], [41.7, 7606.0], [41.8, 7606.0], [41.9, 7606.0], [42.0, 7619.0], [42.1, 7619.0], [42.2, 7619.0], [42.3, 7619.0], [42.4, 7619.0], [42.5, 7619.0], [42.6, 7619.0], [42.7, 7666.0], [42.8, 7666.0], [42.9, 7666.0], [43.0, 7666.0], [43.1, 7666.0], [43.2, 7666.0], [43.3, 7666.0], [43.4, 7695.0], [43.5, 7695.0], [43.6, 7695.0], [43.7, 7695.0], [43.8, 7695.0], [43.9, 7695.0], [44.0, 7731.0], [44.1, 7731.0], [44.2, 7731.0], [44.3, 7731.0], [44.4, 7731.0], [44.5, 7731.0], [44.6, 7731.0], [44.7, 7753.0], [44.8, 7753.0], [44.9, 7753.0], [45.0, 7753.0], [45.1, 7753.0], [45.2, 7753.0], [45.3, 7753.0], [45.4, 7911.0], [45.5, 7911.0], [45.6, 7911.0], [45.7, 7911.0], [45.8, 7911.0], [45.9, 7911.0], [46.0, 7921.0], [46.1, 7921.0], [46.2, 7921.0], [46.3, 7921.0], [46.4, 7921.0], [46.5, 7921.0], [46.6, 7921.0], [46.7, 7975.0], [46.8, 7975.0], [46.9, 7975.0], [47.0, 7975.0], [47.1, 7975.0], [47.2, 7975.0], [47.3, 7975.0], [47.4, 7997.0], [47.5, 7997.0], [47.6, 7997.0], [47.7, 7997.0], [47.8, 7997.0], [47.9, 7997.0], [48.0, 8022.0], [48.1, 8022.0], [48.2, 8022.0], [48.3, 8022.0], [48.4, 8022.0], [48.5, 8022.0], [48.6, 8022.0], [48.7, 8036.0], [48.8, 8036.0], [48.9, 8036.0], [49.0, 8036.0], [49.1, 8036.0], [49.2, 8036.0], [49.3, 8036.0], [49.4, 8044.0], [49.5, 8044.0], [49.6, 8044.0], [49.7, 8044.0], [49.8, 8044.0], [49.9, 8044.0], [50.0, 8059.0], [50.1, 8059.0], [50.2, 8059.0], [50.3, 8059.0], [50.4, 8059.0], [50.5, 8059.0], [50.6, 8059.0], [50.7, 8065.0], [50.8, 8065.0], [50.9, 8065.0], [51.0, 8065.0], [51.1, 8065.0], [51.2, 8065.0], [51.3, 8065.0], [51.4, 8066.0], [51.5, 8066.0], [51.6, 8066.0], [51.7, 8066.0], [51.8, 8066.0], [51.9, 8066.0], [52.0, 8071.0], [52.1, 8071.0], [52.2, 8071.0], [52.3, 8071.0], [52.4, 8071.0], [52.5, 8071.0], [52.6, 8071.0], [52.7, 8091.0], [52.8, 8091.0], [52.9, 8091.0], [53.0, 8091.0], [53.1, 8091.0], [53.2, 8091.0], [53.3, 8091.0], [53.4, 8105.0], [53.5, 8105.0], [53.6, 8105.0], [53.7, 8105.0], [53.8, 8105.0], [53.9, 8105.0], [54.0, 8113.0], [54.1, 8113.0], [54.2, 8113.0], [54.3, 8113.0], [54.4, 8113.0], [54.5, 8113.0], [54.6, 8113.0], [54.7, 8132.0], [54.8, 8132.0], [54.9, 8132.0], [55.0, 8132.0], [55.1, 8132.0], [55.2, 8132.0], [55.3, 8132.0], [55.4, 8223.0], [55.5, 8223.0], [55.6, 8223.0], [55.7, 8223.0], [55.8, 8223.0], [55.9, 8223.0], [56.0, 8268.0], [56.1, 8268.0], [56.2, 8268.0], [56.3, 8268.0], [56.4, 8268.0], [56.5, 8268.0], [56.6, 8268.0], [56.7, 8292.0], [56.8, 8292.0], [56.9, 8292.0], [57.0, 8292.0], [57.1, 8292.0], [57.2, 8292.0], [57.3, 8292.0], [57.4, 8345.0], [57.5, 8345.0], [57.6, 8345.0], [57.7, 8345.0], [57.8, 8345.0], [57.9, 8345.0], [58.0, 8373.0], [58.1, 8373.0], [58.2, 8373.0], [58.3, 8373.0], [58.4, 8373.0], [58.5, 8373.0], [58.6, 8373.0], [58.7, 8393.0], [58.8, 8393.0], [58.9, 8393.0], [59.0, 8393.0], [59.1, 8393.0], [59.2, 8393.0], [59.3, 8393.0], [59.4, 8415.0], [59.5, 8415.0], [59.6, 8415.0], [59.7, 8415.0], [59.8, 8415.0], [59.9, 8415.0], [60.0, 8423.0], [60.1, 8423.0], [60.2, 8423.0], [60.3, 8423.0], [60.4, 8423.0], [60.5, 8423.0], [60.6, 8423.0], [60.7, 8433.0], [60.8, 8433.0], [60.9, 8433.0], [61.0, 8433.0], [61.1, 8433.0], [61.2, 8433.0], [61.3, 8433.0], [61.4, 8491.0], [61.5, 8491.0], [61.6, 8491.0], [61.7, 8491.0], [61.8, 8491.0], [61.9, 8491.0], [62.0, 8506.0], [62.1, 8506.0], [62.2, 8506.0], [62.3, 8506.0], [62.4, 8506.0], [62.5, 8506.0], [62.6, 8506.0], [62.7, 8507.0], [62.8, 8507.0], [62.9, 8507.0], [63.0, 8507.0], [63.1, 8507.0], [63.2, 8507.0], [63.3, 8507.0], [63.4, 8514.0], [63.5, 8514.0], [63.6, 8514.0], [63.7, 8514.0], [63.8, 8514.0], [63.9, 8514.0], [64.0, 8554.0], [64.1, 8554.0], [64.2, 8554.0], [64.3, 8554.0], [64.4, 8554.0], [64.5, 8554.0], [64.6, 8554.0], [64.7, 8581.0], [64.8, 8581.0], [64.9, 8581.0], [65.0, 8581.0], [65.1, 8581.0], [65.2, 8581.0], [65.3, 8581.0], [65.4, 8613.0], [65.5, 8613.0], [65.6, 8613.0], [65.7, 8613.0], [65.8, 8613.0], [65.9, 8613.0], [66.0, 8650.0], [66.1, 8650.0], [66.2, 8650.0], [66.3, 8650.0], [66.4, 8650.0], [66.5, 8650.0], [66.6, 8650.0], [66.7, 8678.0], [66.8, 8678.0], [66.9, 8678.0], [67.0, 8678.0], [67.1, 8678.0], [67.2, 8678.0], [67.3, 8678.0], [67.4, 8703.0], [67.5, 8703.0], [67.6, 8703.0], [67.7, 8703.0], [67.8, 8703.0], [67.9, 8703.0], [68.0, 8710.0], [68.1, 8710.0], [68.2, 8710.0], [68.3, 8710.0], [68.4, 8710.0], [68.5, 8710.0], [68.6, 8710.0], [68.7, 8710.0], [68.8, 8710.0], [68.9, 8710.0], [69.0, 8710.0], [69.1, 8710.0], [69.2, 8710.0], [69.3, 8710.0], [69.4, 8754.0], [69.5, 8754.0], [69.6, 8754.0], [69.7, 8754.0], [69.8, 8754.0], [69.9, 8754.0], [70.0, 8754.0], [70.1, 8754.0], [70.2, 8754.0], [70.3, 8754.0], [70.4, 8754.0], [70.5, 8754.0], [70.6, 8754.0], [70.7, 8761.0], [70.8, 8761.0], [70.9, 8761.0], [71.0, 8761.0], [71.1, 8761.0], [71.2, 8761.0], [71.3, 8761.0], [71.4, 8773.0], [71.5, 8773.0], [71.6, 8773.0], [71.7, 8773.0], [71.8, 8773.0], [71.9, 8773.0], [72.0, 8785.0], [72.1, 8785.0], [72.2, 8785.0], [72.3, 8785.0], [72.4, 8785.0], [72.5, 8785.0], [72.6, 8785.0], [72.7, 8857.0], [72.8, 8857.0], [72.9, 8857.0], [73.0, 8857.0], [73.1, 8857.0], [73.2, 8857.0], [73.3, 8857.0], [73.4, 8870.0], [73.5, 8870.0], [73.6, 8870.0], [73.7, 8870.0], [73.8, 8870.0], [73.9, 8870.0], [74.0, 8891.0], [74.1, 8891.0], [74.2, 8891.0], [74.3, 8891.0], [74.4, 8891.0], [74.5, 8891.0], [74.6, 8891.0], [74.7, 8952.0], [74.8, 8952.0], [74.9, 8952.0], [75.0, 8952.0], [75.1, 8952.0], [75.2, 8952.0], [75.3, 8952.0], [75.4, 8961.0], [75.5, 8961.0], [75.6, 8961.0], [75.7, 8961.0], [75.8, 8961.0], [75.9, 8961.0], [76.0, 9007.0], [76.1, 9007.0], [76.2, 9007.0], [76.3, 9007.0], [76.4, 9007.0], [76.5, 9007.0], [76.6, 9007.0], [76.7, 9019.0], [76.8, 9019.0], [76.9, 9019.0], [77.0, 9019.0], [77.1, 9019.0], [77.2, 9019.0], [77.3, 9019.0], [77.4, 9060.0], [77.5, 9060.0], [77.6, 9060.0], [77.7, 9060.0], [77.8, 9060.0], [77.9, 9060.0], [78.0, 9112.0], [78.1, 9112.0], [78.2, 9112.0], [78.3, 9112.0], [78.4, 9112.0], [78.5, 9112.0], [78.6, 9112.0], [78.7, 9124.0], [78.8, 9124.0], [78.9, 9124.0], [79.0, 9124.0], [79.1, 9124.0], [79.2, 9124.0], [79.3, 9124.0], [79.4, 9130.0], [79.5, 9130.0], [79.6, 9130.0], [79.7, 9130.0], [79.8, 9130.0], [79.9, 9130.0], [80.0, 9279.0], [80.1, 9279.0], [80.2, 9279.0], [80.3, 9279.0], [80.4, 9279.0], [80.5, 9279.0], [80.6, 9279.0], [80.7, 9281.0], [80.8, 9281.0], [80.9, 9281.0], [81.0, 9281.0], [81.1, 9281.0], [81.2, 9281.0], [81.3, 9281.0], [81.4, 9301.0], [81.5, 9301.0], [81.6, 9301.0], [81.7, 9301.0], [81.8, 9301.0], [81.9, 9301.0], [82.0, 9301.0], [82.1, 9361.0], [82.2, 9361.0], [82.3, 9361.0], [82.4, 9361.0], [82.5, 9361.0], [82.6, 9361.0], [82.7, 9387.0], [82.8, 9387.0], [82.9, 9387.0], [83.0, 9387.0], [83.1, 9387.0], [83.2, 9387.0], [83.3, 9387.0], [83.4, 9388.0], [83.5, 9388.0], [83.6, 9388.0], [83.7, 9388.0], [83.8, 9388.0], [83.9, 9388.0], [84.0, 9388.0], [84.1, 9428.0], [84.2, 9428.0], [84.3, 9428.0], [84.4, 9428.0], [84.5, 9428.0], [84.6, 9428.0], [84.7, 9432.0], [84.8, 9432.0], [84.9, 9432.0], [85.0, 9432.0], [85.1, 9432.0], [85.2, 9432.0], [85.3, 9432.0], [85.4, 9445.0], [85.5, 9445.0], [85.6, 9445.0], [85.7, 9445.0], [85.8, 9445.0], [85.9, 9445.0], [86.0, 9445.0], [86.1, 9471.0], [86.2, 9471.0], [86.3, 9471.0], [86.4, 9471.0], [86.5, 9471.0], [86.6, 9471.0], [86.7, 9472.0], [86.8, 9472.0], [86.9, 9472.0], [87.0, 9472.0], [87.1, 9472.0], [87.2, 9472.0], [87.3, 9472.0], [87.4, 9513.0], [87.5, 9513.0], [87.6, 9513.0], [87.7, 9513.0], [87.8, 9513.0], [87.9, 9513.0], [88.0, 9513.0], [88.1, 9584.0], [88.2, 9584.0], [88.3, 9584.0], [88.4, 9584.0], [88.5, 9584.0], [88.6, 9584.0], [88.7, 9625.0], [88.8, 9625.0], [88.9, 9625.0], [89.0, 9625.0], [89.1, 9625.0], [89.2, 9625.0], [89.3, 9625.0], [89.4, 9629.0], [89.5, 9629.0], [89.6, 9629.0], [89.7, 9629.0], [89.8, 9629.0], [89.9, 9629.0], [90.0, 9629.0], [90.1, 9671.0], [90.2, 9671.0], [90.3, 9671.0], [90.4, 9671.0], [90.5, 9671.0], [90.6, 9671.0], [90.7, 9740.0], [90.8, 9740.0], [90.9, 9740.0], [91.0, 9740.0], [91.1, 9740.0], [91.2, 9740.0], [91.3, 9740.0], [91.4, 9776.0], [91.5, 9776.0], [91.6, 9776.0], [91.7, 9776.0], [91.8, 9776.0], [91.9, 9776.0], [92.0, 9776.0], [92.1, 9821.0], [92.2, 9821.0], [92.3, 9821.0], [92.4, 9821.0], [92.5, 9821.0], [92.6, 9821.0], [92.7, 9868.0], [92.8, 9868.0], [92.9, 9868.0], [93.0, 9868.0], [93.1, 9868.0], [93.2, 9868.0], [93.3, 9868.0], [93.4, 10151.0], [93.5, 10151.0], [93.6, 10151.0], [93.7, 10151.0], [93.8, 10151.0], [93.9, 10151.0], [94.0, 10151.0], [94.1, 10198.0], [94.2, 10198.0], [94.3, 10198.0], [94.4, 10198.0], [94.5, 10198.0], [94.6, 10198.0], [94.7, 10548.0], [94.8, 10548.0], [94.9, 10548.0], [95.0, 10548.0], [95.1, 10548.0], [95.2, 10548.0], [95.3, 10548.0], [95.4, 10568.0], [95.5, 10568.0], [95.6, 10568.0], [95.7, 10568.0], [95.8, 10568.0], [95.9, 10568.0], [96.0, 10568.0], [96.1, 10688.0], [96.2, 10688.0], [96.3, 10688.0], [96.4, 10688.0], [96.5, 10688.0], [96.6, 10688.0], [96.7, 11390.0], [96.8, 11390.0], [96.9, 11390.0], [97.0, 11390.0], [97.1, 11390.0], [97.2, 11390.0], [97.3, 11390.0], [97.4, 11455.0], [97.5, 11455.0], [97.6, 11455.0], [97.7, 11455.0], [97.8, 11455.0], [97.9, 11455.0], [98.0, 11455.0], [98.1, 11491.0], [98.2, 11491.0], [98.3, 11491.0], [98.4, 11491.0], [98.5, 11491.0], [98.6, 11491.0], [98.7, 11564.0], [98.8, 11564.0], [98.9, 11564.0], [99.0, 11564.0], [99.1, 11564.0], [99.2, 11564.0], [99.3, 11564.0], [99.4, 11602.0], [99.5, 11602.0], [99.6, 11602.0], [99.7, 11602.0], [99.8, 11602.0], [99.9, 11602.0], [100.0, 11602.0]], "isOverall": false, "label": "VerifyRoutingNumber - Not Found", "isController": false}, {"data": [[0.0, 1810.0], [0.1, 1810.0], [0.2, 1810.0], [0.3, 1810.0], [0.4, 1810.0], [0.5, 1810.0], [0.6, 1810.0], [0.7, 1856.0], [0.8, 1856.0], [0.9, 1856.0], [1.0, 1856.0], [1.1, 1856.0], [1.2, 1856.0], [1.3, 1856.0], [1.4, 1857.0], [1.5, 1857.0], [1.6, 1857.0], [1.7, 1857.0], [1.8, 1857.0], [1.9, 1857.0], [2.0, 1885.0], [2.1, 1885.0], [2.2, 1885.0], [2.3, 1885.0], [2.4, 1885.0], [2.5, 1885.0], [2.6, 1885.0], [2.7, 2600.0], [2.8, 2600.0], [2.9, 2600.0], [3.0, 2600.0], [3.1, 2600.0], [3.2, 2600.0], [3.3, 2600.0], [3.4, 2620.0], [3.5, 2620.0], [3.6, 2620.0], [3.7, 2620.0], [3.8, 2620.0], [3.9, 2620.0], [4.0, 2620.0], [4.1, 2620.0], [4.2, 2620.0], [4.3, 2620.0], [4.4, 2620.0], [4.5, 2620.0], [4.6, 2620.0], [4.7, 2629.0], [4.8, 2629.0], [4.9, 2629.0], [5.0, 2629.0], [5.1, 2629.0], [5.2, 2629.0], [5.3, 2629.0], [5.4, 2740.0], [5.5, 2740.0], [5.6, 2740.0], [5.7, 2740.0], [5.8, 2740.0], [5.9, 2740.0], [6.0, 2740.0], [6.1, 2740.0], [6.2, 2740.0], [6.3, 2740.0], [6.4, 2740.0], [6.5, 2740.0], [6.6, 2740.0], [6.7, 2740.0], [6.8, 2740.0], [6.9, 2740.0], [7.0, 2740.0], [7.1, 2740.0], [7.2, 2740.0], [7.3, 2740.0], [7.4, 2876.0], [7.5, 2876.0], [7.6, 2876.0], [7.7, 2876.0], [7.8, 2876.0], [7.9, 2876.0], [8.0, 3122.0], [8.1, 3122.0], [8.2, 3122.0], [8.3, 3122.0], [8.4, 3122.0], [8.5, 3122.0], [8.6, 3122.0], [8.7, 3134.0], [8.8, 3134.0], [8.9, 3134.0], [9.0, 3134.0], [9.1, 3134.0], [9.2, 3134.0], [9.3, 3134.0], [9.4, 3168.0], [9.5, 3168.0], [9.6, 3168.0], [9.7, 3168.0], [9.8, 3168.0], [9.9, 3168.0], [10.0, 3173.0], [10.1, 3173.0], [10.2, 3173.0], [10.3, 3173.0], [10.4, 3173.0], [10.5, 3173.0], [10.6, 3173.0], [10.7, 3197.0], [10.8, 3197.0], [10.9, 3197.0], [11.0, 3197.0], [11.1, 3197.0], [11.2, 3197.0], [11.3, 3197.0], [11.4, 3286.0], [11.5, 3286.0], [11.6, 3286.0], [11.7, 3286.0], [11.8, 3286.0], [11.9, 3286.0], [12.0, 3286.0], [12.1, 3286.0], [12.2, 3286.0], [12.3, 3286.0], [12.4, 3286.0], [12.5, 3286.0], [12.6, 3286.0], [12.7, 3325.0], [12.8, 3325.0], [12.9, 3325.0], [13.0, 3325.0], [13.1, 3325.0], [13.2, 3325.0], [13.3, 3325.0], [13.4, 3328.0], [13.5, 3328.0], [13.6, 3328.0], [13.7, 3328.0], [13.8, 3328.0], [13.9, 3328.0], [14.0, 3366.0], [14.1, 3366.0], [14.2, 3366.0], [14.3, 3366.0], [14.4, 3366.0], [14.5, 3366.0], [14.6, 3366.0], [14.7, 3400.0], [14.8, 3400.0], [14.9, 3400.0], [15.0, 3400.0], [15.1, 3400.0], [15.2, 3400.0], [15.3, 3400.0], [15.4, 3487.0], [15.5, 3487.0], [15.6, 3487.0], [15.7, 3487.0], [15.8, 3487.0], [15.9, 3487.0], [16.0, 3527.0], [16.1, 3527.0], [16.2, 3527.0], [16.3, 3527.0], [16.4, 3527.0], [16.5, 3527.0], [16.6, 3527.0], [16.7, 3557.0], [16.8, 3557.0], [16.9, 3557.0], [17.0, 3557.0], [17.1, 3557.0], [17.2, 3557.0], [17.3, 3557.0], [17.4, 3640.0], [17.5, 3640.0], [17.6, 3640.0], [17.7, 3640.0], [17.8, 3640.0], [17.9, 3640.0], [18.0, 3643.0], [18.1, 3643.0], [18.2, 3643.0], [18.3, 3643.0], [18.4, 3643.0], [18.5, 3643.0], [18.6, 3643.0], [18.7, 3649.0], [18.8, 3649.0], [18.9, 3649.0], [19.0, 3649.0], [19.1, 3649.0], [19.2, 3649.0], [19.3, 3649.0], [19.4, 3680.0], [19.5, 3680.0], [19.6, 3680.0], [19.7, 3680.0], [19.8, 3680.0], [19.9, 3680.0], [20.0, 3688.0], [20.1, 3688.0], [20.2, 3688.0], [20.3, 3688.0], [20.4, 3688.0], [20.5, 3688.0], [20.6, 3688.0], [20.7, 3690.0], [20.8, 3690.0], [20.9, 3690.0], [21.0, 3690.0], [21.1, 3690.0], [21.2, 3690.0], [21.3, 3690.0], [21.4, 3694.0], [21.5, 3694.0], [21.6, 3694.0], [21.7, 3694.0], [21.8, 3694.0], [21.9, 3694.0], [22.0, 3694.0], [22.1, 3695.0], [22.2, 3695.0], [22.3, 3695.0], [22.4, 3695.0], [22.5, 3695.0], [22.6, 3695.0], [22.7, 3696.0], [22.8, 3696.0], [22.9, 3696.0], [23.0, 3696.0], [23.1, 3696.0], [23.2, 3696.0], [23.3, 3696.0], [23.4, 3696.0], [23.5, 3696.0], [23.6, 3696.0], [23.7, 3696.0], [23.8, 3696.0], [23.9, 3696.0], [24.0, 3696.0], [24.1, 3697.0], [24.2, 3697.0], [24.3, 3697.0], [24.4, 3697.0], [24.5, 3697.0], [24.6, 3697.0], [24.7, 3727.0], [24.8, 3727.0], [24.9, 3727.0], [25.0, 3727.0], [25.1, 3727.0], [25.2, 3727.0], [25.3, 3727.0], [25.4, 3728.0], [25.5, 3728.0], [25.6, 3728.0], [25.7, 3728.0], [25.8, 3728.0], [25.9, 3728.0], [26.0, 3728.0], [26.1, 3729.0], [26.2, 3729.0], [26.3, 3729.0], [26.4, 3729.0], [26.5, 3729.0], [26.6, 3729.0], [26.7, 3730.0], [26.8, 3730.0], [26.9, 3730.0], [27.0, 3730.0], [27.1, 3730.0], [27.2, 3730.0], [27.3, 3730.0], [27.4, 3731.0], [27.5, 3731.0], [27.6, 3731.0], [27.7, 3731.0], [27.8, 3731.0], [27.9, 3731.0], [28.0, 3731.0], [28.1, 3733.0], [28.2, 3733.0], [28.3, 3733.0], [28.4, 3733.0], [28.5, 3733.0], [28.6, 3733.0], [28.7, 3855.0], [28.8, 3855.0], [28.9, 3855.0], [29.0, 3855.0], [29.1, 3855.0], [29.2, 3855.0], [29.3, 3855.0], [29.4, 3887.0], [29.5, 3887.0], [29.6, 3887.0], [29.7, 3887.0], [29.8, 3887.0], [29.9, 3887.0], [30.0, 3887.0], [30.1, 3925.0], [30.2, 3925.0], [30.3, 3925.0], [30.4, 3925.0], [30.5, 3925.0], [30.6, 3925.0], [30.7, 3928.0], [30.8, 3928.0], [30.9, 3928.0], [31.0, 3928.0], [31.1, 3928.0], [31.2, 3928.0], [31.3, 3928.0], [31.4, 3946.0], [31.5, 3946.0], [31.6, 3946.0], [31.7, 3946.0], [31.8, 3946.0], [31.9, 3946.0], [32.0, 3946.0], [32.1, 3982.0], [32.2, 3982.0], [32.3, 3982.0], [32.4, 3982.0], [32.5, 3982.0], [32.6, 3982.0], [32.7, 4011.0], [32.8, 4011.0], [32.9, 4011.0], [33.0, 4011.0], [33.1, 4011.0], [33.2, 4011.0], [33.3, 4011.0], [33.4, 4018.0], [33.5, 4018.0], [33.6, 4018.0], [33.7, 4018.0], [33.8, 4018.0], [33.9, 4018.0], [34.0, 4018.0], [34.1, 4086.0], [34.2, 4086.0], [34.3, 4086.0], [34.4, 4086.0], [34.5, 4086.0], [34.6, 4086.0], [34.7, 4087.0], [34.8, 4087.0], [34.9, 4087.0], [35.0, 4087.0], [35.1, 4087.0], [35.2, 4087.0], [35.3, 4087.0], [35.4, 4096.0], [35.5, 4096.0], [35.6, 4096.0], [35.7, 4096.0], [35.8, 4096.0], [35.9, 4096.0], [36.0, 4106.0], [36.1, 4106.0], [36.2, 4106.0], [36.3, 4106.0], [36.4, 4106.0], [36.5, 4106.0], [36.6, 4106.0], [36.7, 4131.0], [36.8, 4131.0], [36.9, 4131.0], [37.0, 4131.0], [37.1, 4131.0], [37.2, 4131.0], [37.3, 4131.0], [37.4, 4171.0], [37.5, 4171.0], [37.6, 4171.0], [37.7, 4171.0], [37.8, 4171.0], [37.9, 4171.0], [38.0, 4235.0], [38.1, 4235.0], [38.2, 4235.0], [38.3, 4235.0], [38.4, 4235.0], [38.5, 4235.0], [38.6, 4235.0], [38.7, 4245.0], [38.8, 4245.0], [38.9, 4245.0], [39.0, 4245.0], [39.1, 4245.0], [39.2, 4245.0], [39.3, 4245.0], [39.4, 4252.0], [39.5, 4252.0], [39.6, 4252.0], [39.7, 4252.0], [39.8, 4252.0], [39.9, 4252.0], [40.0, 4280.0], [40.1, 4280.0], [40.2, 4280.0], [40.3, 4280.0], [40.4, 4280.0], [40.5, 4280.0], [40.6, 4280.0], [40.7, 4284.0], [40.8, 4284.0], [40.9, 4284.0], [41.0, 4284.0], [41.1, 4284.0], [41.2, 4284.0], [41.3, 4284.0], [41.4, 4287.0], [41.5, 4287.0], [41.6, 4287.0], [41.7, 4287.0], [41.8, 4287.0], [41.9, 4287.0], [42.0, 4296.0], [42.1, 4296.0], [42.2, 4296.0], [42.3, 4296.0], [42.4, 4296.0], [42.5, 4296.0], [42.6, 4296.0], [42.7, 4300.0], [42.8, 4300.0], [42.9, 4300.0], [43.0, 4300.0], [43.1, 4300.0], [43.2, 4300.0], [43.3, 4300.0], [43.4, 4301.0], [43.5, 4301.0], [43.6, 4301.0], [43.7, 4301.0], [43.8, 4301.0], [43.9, 4301.0], [44.0, 4335.0], [44.1, 4335.0], [44.2, 4335.0], [44.3, 4335.0], [44.4, 4335.0], [44.5, 4335.0], [44.6, 4335.0], [44.7, 4370.0], [44.8, 4370.0], [44.9, 4370.0], [45.0, 4370.0], [45.1, 4370.0], [45.2, 4370.0], [45.3, 4370.0], [45.4, 4382.0], [45.5, 4382.0], [45.6, 4382.0], [45.7, 4382.0], [45.8, 4382.0], [45.9, 4382.0], [46.0, 4420.0], [46.1, 4420.0], [46.2, 4420.0], [46.3, 4420.0], [46.4, 4420.0], [46.5, 4420.0], [46.6, 4420.0], [46.7, 4459.0], [46.8, 4459.0], [46.9, 4459.0], [47.0, 4459.0], [47.1, 4459.0], [47.2, 4459.0], [47.3, 4459.0], [47.4, 4461.0], [47.5, 4461.0], [47.6, 4461.0], [47.7, 4461.0], [47.8, 4461.0], [47.9, 4461.0], [48.0, 4479.0], [48.1, 4479.0], [48.2, 4479.0], [48.3, 4479.0], [48.4, 4479.0], [48.5, 4479.0], [48.6, 4479.0], [48.7, 4493.0], [48.8, 4493.0], [48.9, 4493.0], [49.0, 4493.0], [49.1, 4493.0], [49.2, 4493.0], [49.3, 4493.0], [49.4, 4496.0], [49.5, 4496.0], [49.6, 4496.0], [49.7, 4496.0], [49.8, 4496.0], [49.9, 4496.0], [50.0, 4498.0], [50.1, 4498.0], [50.2, 4498.0], [50.3, 4498.0], [50.4, 4498.0], [50.5, 4498.0], [50.6, 4498.0], [50.7, 4529.0], [50.8, 4529.0], [50.9, 4529.0], [51.0, 4529.0], [51.1, 4529.0], [51.2, 4529.0], [51.3, 4529.0], [51.4, 4556.0], [51.5, 4556.0], [51.6, 4556.0], [51.7, 4556.0], [51.8, 4556.0], [51.9, 4556.0], [52.0, 4566.0], [52.1, 4566.0], [52.2, 4566.0], [52.3, 4566.0], [52.4, 4566.0], [52.5, 4566.0], [52.6, 4566.0], [52.7, 4585.0], [52.8, 4585.0], [52.9, 4585.0], [53.0, 4585.0], [53.1, 4585.0], [53.2, 4585.0], [53.3, 4585.0], [53.4, 4586.0], [53.5, 4586.0], [53.6, 4586.0], [53.7, 4586.0], [53.8, 4586.0], [53.9, 4586.0], [54.0, 4594.0], [54.1, 4594.0], [54.2, 4594.0], [54.3, 4594.0], [54.4, 4594.0], [54.5, 4594.0], [54.6, 4594.0], [54.7, 4598.0], [54.8, 4598.0], [54.9, 4598.0], [55.0, 4598.0], [55.1, 4598.0], [55.2, 4598.0], [55.3, 4598.0], [55.4, 4623.0], [55.5, 4623.0], [55.6, 4623.0], [55.7, 4623.0], [55.8, 4623.0], [55.9, 4623.0], [56.0, 4626.0], [56.1, 4626.0], [56.2, 4626.0], [56.3, 4626.0], [56.4, 4626.0], [56.5, 4626.0], [56.6, 4626.0], [56.7, 4655.0], [56.8, 4655.0], [56.9, 4655.0], [57.0, 4655.0], [57.1, 4655.0], [57.2, 4655.0], [57.3, 4655.0], [57.4, 4669.0], [57.5, 4669.0], [57.6, 4669.0], [57.7, 4669.0], [57.8, 4669.0], [57.9, 4669.0], [58.0, 4682.0], [58.1, 4682.0], [58.2, 4682.0], [58.3, 4682.0], [58.4, 4682.0], [58.5, 4682.0], [58.6, 4682.0], [58.7, 4735.0], [58.8, 4735.0], [58.9, 4735.0], [59.0, 4735.0], [59.1, 4735.0], [59.2, 4735.0], [59.3, 4735.0], [59.4, 4740.0], [59.5, 4740.0], [59.6, 4740.0], [59.7, 4740.0], [59.8, 4740.0], [59.9, 4740.0], [60.0, 4778.0], [60.1, 4778.0], [60.2, 4778.0], [60.3, 4778.0], [60.4, 4778.0], [60.5, 4778.0], [60.6, 4778.0], [60.7, 4852.0], [60.8, 4852.0], [60.9, 4852.0], [61.0, 4852.0], [61.1, 4852.0], [61.2, 4852.0], [61.3, 4852.0], [61.4, 4856.0], [61.5, 4856.0], [61.6, 4856.0], [61.7, 4856.0], [61.8, 4856.0], [61.9, 4856.0], [62.0, 4859.0], [62.1, 4859.0], [62.2, 4859.0], [62.3, 4859.0], [62.4, 4859.0], [62.5, 4859.0], [62.6, 4859.0], [62.7, 4865.0], [62.8, 4865.0], [62.9, 4865.0], [63.0, 4865.0], [63.1, 4865.0], [63.2, 4865.0], [63.3, 4865.0], [63.4, 4893.0], [63.5, 4893.0], [63.6, 4893.0], [63.7, 4893.0], [63.8, 4893.0], [63.9, 4893.0], [64.0, 4899.0], [64.1, 4899.0], [64.2, 4899.0], [64.3, 4899.0], [64.4, 4899.0], [64.5, 4899.0], [64.6, 4899.0], [64.7, 4970.0], [64.8, 4970.0], [64.9, 4970.0], [65.0, 4970.0], [65.1, 4970.0], [65.2, 4970.0], [65.3, 4970.0], [65.4, 5031.0], [65.5, 5031.0], [65.6, 5031.0], [65.7, 5031.0], [65.8, 5031.0], [65.9, 5031.0], [66.0, 5052.0], [66.1, 5052.0], [66.2, 5052.0], [66.3, 5052.0], [66.4, 5052.0], [66.5, 5052.0], [66.6, 5052.0], [66.7, 5066.0], [66.8, 5066.0], [66.9, 5066.0], [67.0, 5066.0], [67.1, 5066.0], [67.2, 5066.0], [67.3, 5066.0], [67.4, 5163.0], [67.5, 5163.0], [67.6, 5163.0], [67.7, 5163.0], [67.8, 5163.0], [67.9, 5163.0], [68.0, 5226.0], [68.1, 5226.0], [68.2, 5226.0], [68.3, 5226.0], [68.4, 5226.0], [68.5, 5226.0], [68.6, 5226.0], [68.7, 5236.0], [68.8, 5236.0], [68.9, 5236.0], [69.0, 5236.0], [69.1, 5236.0], [69.2, 5236.0], [69.3, 5236.0], [69.4, 5315.0], [69.5, 5315.0], [69.6, 5315.0], [69.7, 5315.0], [69.8, 5315.0], [69.9, 5315.0], [70.0, 5349.0], [70.1, 5349.0], [70.2, 5349.0], [70.3, 5349.0], [70.4, 5349.0], [70.5, 5349.0], [70.6, 5349.0], [70.7, 5362.0], [70.8, 5362.0], [70.9, 5362.0], [71.0, 5362.0], [71.1, 5362.0], [71.2, 5362.0], [71.3, 5362.0], [71.4, 5399.0], [71.5, 5399.0], [71.6, 5399.0], [71.7, 5399.0], [71.8, 5399.0], [71.9, 5399.0], [72.0, 5438.0], [72.1, 5438.0], [72.2, 5438.0], [72.3, 5438.0], [72.4, 5438.0], [72.5, 5438.0], [72.6, 5438.0], [72.7, 5447.0], [72.8, 5447.0], [72.9, 5447.0], [73.0, 5447.0], [73.1, 5447.0], [73.2, 5447.0], [73.3, 5447.0], [73.4, 5468.0], [73.5, 5468.0], [73.6, 5468.0], [73.7, 5468.0], [73.8, 5468.0], [73.9, 5468.0], [74.0, 5482.0], [74.1, 5482.0], [74.2, 5482.0], [74.3, 5482.0], [74.4, 5482.0], [74.5, 5482.0], [74.6, 5482.0], [74.7, 5486.0], [74.8, 5486.0], [74.9, 5486.0], [75.0, 5486.0], [75.1, 5486.0], [75.2, 5486.0], [75.3, 5486.0], [75.4, 5499.0], [75.5, 5499.0], [75.6, 5499.0], [75.7, 5499.0], [75.8, 5499.0], [75.9, 5499.0], [76.0, 5526.0], [76.1, 5526.0], [76.2, 5526.0], [76.3, 5526.0], [76.4, 5526.0], [76.5, 5526.0], [76.6, 5526.0], [76.7, 5529.0], [76.8, 5529.0], [76.9, 5529.0], [77.0, 5529.0], [77.1, 5529.0], [77.2, 5529.0], [77.3, 5529.0], [77.4, 5594.0], [77.5, 5594.0], [77.6, 5594.0], [77.7, 5594.0], [77.8, 5594.0], [77.9, 5594.0], [78.0, 5729.0], [78.1, 5729.0], [78.2, 5729.0], [78.3, 5729.0], [78.4, 5729.0], [78.5, 5729.0], [78.6, 5729.0], [78.7, 5903.0], [78.8, 5903.0], [78.9, 5903.0], [79.0, 5903.0], [79.1, 5903.0], [79.2, 5903.0], [79.3, 5903.0], [79.4, 6016.0], [79.5, 6016.0], [79.6, 6016.0], [79.7, 6016.0], [79.8, 6016.0], [79.9, 6016.0], [80.0, 6016.0], [80.1, 6139.0], [80.2, 6139.0], [80.3, 6139.0], [80.4, 6139.0], [80.5, 6139.0], [80.6, 6139.0], [80.7, 6160.0], [80.8, 6160.0], [80.9, 6160.0], [81.0, 6160.0], [81.1, 6160.0], [81.2, 6160.0], [81.3, 6160.0], [81.4, 6246.0], [81.5, 6246.0], [81.6, 6246.0], [81.7, 6246.0], [81.8, 6246.0], [81.9, 6246.0], [82.0, 6246.0], [82.1, 6323.0], [82.2, 6323.0], [82.3, 6323.0], [82.4, 6323.0], [82.5, 6323.0], [82.6, 6323.0], [82.7, 6326.0], [82.8, 6326.0], [82.9, 6326.0], [83.0, 6326.0], [83.1, 6326.0], [83.2, 6326.0], [83.3, 6326.0], [83.4, 6326.0], [83.5, 6326.0], [83.6, 6326.0], [83.7, 6326.0], [83.8, 6326.0], [83.9, 6326.0], [84.0, 6326.0], [84.1, 6396.0], [84.2, 6396.0], [84.3, 6396.0], [84.4, 6396.0], [84.5, 6396.0], [84.6, 6396.0], [84.7, 6497.0], [84.8, 6497.0], [84.9, 6497.0], [85.0, 6497.0], [85.1, 6497.0], [85.2, 6497.0], [85.3, 6497.0], [85.4, 6796.0], [85.5, 6796.0], [85.6, 6796.0], [85.7, 6796.0], [85.8, 6796.0], [85.9, 6796.0], [86.0, 6796.0], [86.1, 6798.0], [86.2, 6798.0], [86.3, 6798.0], [86.4, 6798.0], [86.5, 6798.0], [86.6, 6798.0], [86.7, 6800.0], [86.8, 6800.0], [86.9, 6800.0], [87.0, 6800.0], [87.1, 6800.0], [87.2, 6800.0], [87.3, 6800.0], [87.4, 6809.0], [87.5, 6809.0], [87.6, 6809.0], [87.7, 6809.0], [87.8, 6809.0], [87.9, 6809.0], [88.0, 6809.0], [88.1, 6812.0], [88.2, 6812.0], [88.3, 6812.0], [88.4, 6812.0], [88.5, 6812.0], [88.6, 6812.0], [88.7, 6850.0], [88.8, 6850.0], [88.9, 6850.0], [89.0, 6850.0], [89.1, 6850.0], [89.2, 6850.0], [89.3, 6850.0], [89.4, 6892.0], [89.5, 6892.0], [89.6, 6892.0], [89.7, 6892.0], [89.8, 6892.0], [89.9, 6892.0], [90.0, 6892.0], [90.1, 6895.0], [90.2, 6895.0], [90.3, 6895.0], [90.4, 6895.0], [90.5, 6895.0], [90.6, 6895.0], [90.7, 6929.0], [90.8, 6929.0], [90.9, 6929.0], [91.0, 6929.0], [91.1, 6929.0], [91.2, 6929.0], [91.3, 6929.0], [91.4, 6971.0], [91.5, 6971.0], [91.6, 6971.0], [91.7, 6971.0], [91.8, 6971.0], [91.9, 6971.0], [92.0, 6971.0], [92.1, 7249.0], [92.2, 7249.0], [92.3, 7249.0], [92.4, 7249.0], [92.5, 7249.0], [92.6, 7249.0], [92.7, 7289.0], [92.8, 7289.0], [92.9, 7289.0], [93.0, 7289.0], [93.1, 7289.0], [93.2, 7289.0], [93.3, 7289.0], [93.4, 7291.0], [93.5, 7291.0], [93.6, 7291.0], [93.7, 7291.0], [93.8, 7291.0], [93.9, 7291.0], [94.0, 7291.0], [94.1, 7344.0], [94.2, 7344.0], [94.3, 7344.0], [94.4, 7344.0], [94.5, 7344.0], [94.6, 7344.0], [94.7, 7412.0], [94.8, 7412.0], [94.9, 7412.0], [95.0, 7412.0], [95.1, 7412.0], [95.2, 7412.0], [95.3, 7412.0], [95.4, 7937.0], [95.5, 7937.0], [95.6, 7937.0], [95.7, 7937.0], [95.8, 7937.0], [95.9, 7937.0], [96.0, 7937.0], [96.1, 8020.0], [96.2, 8020.0], [96.3, 8020.0], [96.4, 8020.0], [96.5, 8020.0], [96.6, 8020.0], [96.7, 8070.0], [96.8, 8070.0], [96.9, 8070.0], [97.0, 8070.0], [97.1, 8070.0], [97.2, 8070.0], [97.3, 8070.0], [97.4, 8275.0], [97.5, 8275.0], [97.6, 8275.0], [97.7, 8275.0], [97.8, 8275.0], [97.9, 8275.0], [98.0, 8275.0], [98.1, 8372.0], [98.2, 8372.0], [98.3, 8372.0], [98.4, 8372.0], [98.5, 8372.0], [98.6, 8372.0], [98.7, 8654.0], [98.8, 8654.0], [98.9, 8654.0], [99.0, 8654.0], [99.1, 8654.0], [99.2, 8654.0], [99.3, 8654.0], [99.4, 9513.0], [99.5, 9513.0], [99.6, 9513.0], [99.7, 9513.0], [99.8, 9513.0], [99.9, 9513.0], [100.0, 9513.0]], "isOverall": false, "label": "VerifyRoutingNumber - Success", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1800.0, "maxY": 11.0, "series": [{"data": [[2800.0, 2.0], [2700.0, 2.0], [3000.0, 2.0], [3300.0, 1.0], [3400.0, 1.0], [3800.0, 1.0], [3900.0, 1.0], [4000.0, 1.0], [4100.0, 1.0], [4300.0, 3.0], [4400.0, 1.0], [4600.0, 3.0], [4500.0, 1.0], [4700.0, 2.0], [4800.0, 2.0], [4900.0, 1.0], [5100.0, 2.0], [5000.0, 1.0], [5300.0, 2.0], [5500.0, 1.0], [5400.0, 2.0], [5600.0, 4.0], [5900.0, 1.0], [6000.0, 3.0], [6100.0, 1.0], [6300.0, 1.0], [6400.0, 4.0], [6500.0, 2.0], [6600.0, 1.0], [6700.0, 2.0], [6800.0, 2.0], [6900.0, 3.0], [7300.0, 4.0], [7600.0, 4.0], [7500.0, 1.0], [7700.0, 2.0], [7900.0, 4.0], [8000.0, 8.0], [8100.0, 3.0], [8400.0, 4.0], [8200.0, 3.0], [8300.0, 3.0], [8500.0, 5.0], [8700.0, 8.0], [8600.0, 3.0], [8800.0, 3.0], [9100.0, 3.0], [9000.0, 3.0], [8900.0, 2.0], [9200.0, 2.0], [9400.0, 5.0], [9500.0, 2.0], [9600.0, 3.0], [9300.0, 4.0], [9700.0, 2.0], [10100.0, 2.0], [9800.0, 2.0], [10500.0, 2.0], [10600.0, 1.0], [11300.0, 1.0], [11600.0, 1.0], [11400.0, 2.0], [11500.0, 1.0]], "isOverall": false, "label": "VerifyRoutingNumber - Not Found", "isController": false}, {"data": [[8300.0, 1.0], [8200.0, 1.0], [8600.0, 1.0], [9500.0, 1.0], [1800.0, 4.0], [2600.0, 4.0], [2700.0, 3.0], [2800.0, 1.0], [3100.0, 5.0], [3300.0, 3.0], [3200.0, 2.0], [3400.0, 2.0], [3500.0, 2.0], [3600.0, 11.0], [3700.0, 6.0], [3800.0, 2.0], [3900.0, 4.0], [4000.0, 5.0], [4200.0, 7.0], [4300.0, 5.0], [4100.0, 3.0], [4500.0, 7.0], [4400.0, 7.0], [4600.0, 5.0], [4700.0, 3.0], [4800.0, 6.0], [5000.0, 3.0], [4900.0, 1.0], [5100.0, 1.0], [5300.0, 4.0], [5200.0, 2.0], [5400.0, 6.0], [5500.0, 3.0], [5700.0, 1.0], [6000.0, 1.0], [5900.0, 1.0], [6100.0, 2.0], [6300.0, 4.0], [6200.0, 1.0], [6400.0, 1.0], [6800.0, 6.0], [6900.0, 2.0], [6700.0, 2.0], [7200.0, 3.0], [7300.0, 1.0], [7400.0, 1.0], [7900.0, 1.0], [8000.0, 2.0]], "isOverall": false, "label": "VerifyRoutingNumber - Success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 11600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 300.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 300.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 300.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 112.48000000000003, "minX": 1.68973218E12, "maxY": 112.48000000000003, "series": [{"data": [[1.68973218E12, 112.48000000000003]], "isOverall": false, "label": "ROUTING_NUMBER", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68973218E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1885.0, "minX": 1.0, "maxY": 11602.0, "series": [{"data": [[134.0, 10198.0], [143.0, 9486.0], [142.0, 9548.0], [141.0, 9301.0], [138.0, 9445.0], [137.0, 9822.0], [136.0, 9821.0], [150.0, 7002.234375000001], [146.0, 9432.0], [144.0, 9450.0], [91.0, 11455.0], [103.0, 11564.0], [107.0, 11602.0], [105.0, 11491.0], [115.0, 10568.0], [114.0, 10875.333333333334]], "isOverall": false, "label": "VerifyRoutingNumber - Not Found", "isController": false}, {"data": [[146.88, 7466.326666666668]], "isOverall": false, "label": "VerifyRoutingNumber - Not Found-Aggregated", "isController": false}, {"data": [[5.0, 4434.0], [6.0, 1885.0], [7.0, 5052.0], [10.0, 2423.3333333333335], [11.0, 4682.0], [14.0, 3773.6666666666665], [15.0, 3527.0], [16.0, 3925.0], [18.0, 4732.5], [19.0, 4865.0], [21.0, 2620.0], [23.0, 3511.0], [26.0, 4510.666666666667], [28.0, 4992.0], [30.0, 3730.5], [33.0, 3733.0], [35.0, 4256.5], [36.0, 2600.0], [41.0, 4372.2], [43.0, 4180.0], [48.0, 4431.0], [51.0, 4018.0], [50.0, 4734.0], [54.0, 4211.333333333333], [57.0, 4025.6666666666665], [60.0, 3638.6666666666665], [66.0, 4420.0], [65.0, 4585.0], [64.0, 5820.75], [69.0, 3286.0], [68.0, 4118.5], [77.0, 5354.0], [91.0, 5569.833333333334], [103.0, 5129.235294117647], [105.0, 6454.5], [104.0, 5399.0], [109.0, 4529.0], [108.0, 7544.0], [115.0, 2629.0], [114.0, 3286.0], [113.0, 3758.0], [117.0, 3366.0], [116.0, 6139.0], [122.0, 4518.5], [120.0, 4541.333333333333], [125.0, 4587.666666666667], [135.0, 4586.0], [134.0, 4311.0], [132.0, 4343.0], [128.0, 5332.666666666667], [143.0, 6016.0], [142.0, 5499.0], [141.0, 5031.0], [140.0, 5468.0], [139.0, 4778.0], [138.0, 5486.0], [137.0, 7344.0], [136.0, 5066.0], [150.0, 6305.5], [146.0, 6809.0], [145.0, 7291.0], [144.0, 6497.0], [1.0, 6396.0]], "isOverall": false, "label": "VerifyRoutingNumber - Success", "isController": false}, {"data": [[78.07999999999998, 4764.666666666669]], "isOverall": false, "label": "VerifyRoutingNumber - Success-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 150.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4190.0, "minX": 1.68973218E12, "maxY": 4590.0, "series": [{"data": [[1.68973218E12, 4590.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.68973218E12, 4190.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68973218E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4764.666666666669, "minX": 1.68973218E12, "maxY": 7466.326666666668, "series": [{"data": [[1.68973218E12, 7466.326666666668]], "isOverall": false, "label": "VerifyRoutingNumber - Not Found", "isController": false}, {"data": [[1.68973218E12, 4764.666666666669]], "isOverall": false, "label": "VerifyRoutingNumber - Success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68973218E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4764.660000000001, "minX": 1.68973218E12, "maxY": 7466.2333333333345, "series": [{"data": [[1.68973218E12, 7466.2333333333345]], "isOverall": false, "label": "VerifyRoutingNumber - Not Found", "isController": false}, {"data": [[1.68973218E12, 4764.660000000001]], "isOverall": false, "label": "VerifyRoutingNumber - Success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68973218E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68973218E12, "maxY": 100.12666666666667, "series": [{"data": [[1.68973218E12, 100.12666666666667]], "isOverall": false, "label": "VerifyRoutingNumber - Not Found", "isController": false}, {"data": [[1.68973218E12, 0.0]], "isOverall": false, "label": "VerifyRoutingNumber - Success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68973218E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1810.0, "minX": 1.68973218E12, "maxY": 11602.0, "series": [{"data": [[1.68973218E12, 11602.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.68973218E12, 9280.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.68973218E12, 11490.64]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.68973218E12, 9668.9]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.68973218E12, 1810.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.68973218E12, 5608.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68973218E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2793.0, "minX": 4.0, "maxY": 8510.5, "series": [{"data": [[4.0, 2793.0], [8.0, 7513.0], [16.0, 3947.5], [17.0, 5468.0], [18.0, 5869.0], [5.0, 3345.0], [47.0, 6497.0], [46.0, 5460.0], [48.0, 4282.0], [13.0, 4413.0], [30.0, 8510.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 48.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2791.5, "minX": 4.0, "maxY": 8510.5, "series": [{"data": [[4.0, 2791.5], [8.0, 7513.0], [16.0, 3947.5], [17.0, 5468.0], [18.0, 5869.0], [5.0, 3345.0], [47.0, 6497.0], [46.0, 5460.0], [48.0, 4282.0], [13.0, 4413.0], [30.0, 8510.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 48.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.68973218E12, "maxY": 5.0, "series": [{"data": [[1.68973218E12, 5.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68973218E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.68973218E12, "maxY": 5.0, "series": [{"data": [[1.68973218E12, 5.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.68973218E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.5, "minX": 1.68973218E12, "maxY": 2.5, "series": [{"data": [[1.68973218E12, 2.5]], "isOverall": false, "label": "VerifyRoutingNumber - Success-success", "isController": false}, {"data": [[1.68973218E12, 2.5]], "isOverall": false, "label": "VerifyRoutingNumber - Not Found-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68973218E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.68973218E12, "maxY": 5.0, "series": [{"data": [[1.68973218E12, 5.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.68973218E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

