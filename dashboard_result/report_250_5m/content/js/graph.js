/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 87.0, "minX": 0.0, "maxY": 42063.0, "series": [{"data": [[0.0, 169.0], [0.1, 172.0], [0.2, 174.0], [0.3, 175.0], [0.4, 176.0], [0.5, 177.0], [0.6, 177.0], [0.7, 178.0], [0.8, 179.0], [0.9, 179.0], [1.0, 180.0], [1.1, 180.0], [1.2, 181.0], [1.3, 182.0], [1.4, 182.0], [1.5, 183.0], [1.6, 183.0], [1.7, 183.0], [1.8, 184.0], [1.9, 184.0], [2.0, 185.0], [2.1, 185.0], [2.2, 186.0], [2.3, 186.0], [2.4, 187.0], [2.5, 187.0], [2.6, 188.0], [2.7, 188.0], [2.8, 189.0], [2.9, 189.0], [3.0, 189.0], [3.1, 190.0], [3.2, 190.0], [3.3, 191.0], [3.4, 192.0], [3.5, 192.0], [3.6, 192.0], [3.7, 193.0], [3.8, 193.0], [3.9, 193.0], [4.0, 194.0], [4.1, 194.0], [4.2, 195.0], [4.3, 196.0], [4.4, 196.0], [4.5, 197.0], [4.6, 197.0], [4.7, 198.0], [4.8, 199.0], [4.9, 199.0], [5.0, 200.0], [5.1, 201.0], [5.2, 202.0], [5.3, 202.0], [5.4, 203.0], [5.5, 204.0], [5.6, 205.0], [5.7, 206.0], [5.8, 206.0], [5.9, 208.0], [6.0, 209.0], [6.1, 211.0], [6.2, 211.0], [6.3, 213.0], [6.4, 213.0], [6.5, 214.0], [6.6, 215.0], [6.7, 216.0], [6.8, 217.0], [6.9, 218.0], [7.0, 219.0], [7.1, 221.0], [7.2, 222.0], [7.3, 224.0], [7.4, 226.0], [7.5, 228.0], [7.6, 229.0], [7.7, 230.0], [7.8, 231.0], [7.9, 232.0], [8.0, 233.0], [8.1, 234.0], [8.2, 235.0], [8.3, 236.0], [8.4, 237.0], [8.5, 238.0], [8.6, 239.0], [8.7, 241.0], [8.8, 243.0], [8.9, 244.0], [9.0, 246.0], [9.1, 247.0], [9.2, 249.0], [9.3, 250.0], [9.4, 252.0], [9.5, 253.0], [9.6, 254.0], [9.7, 256.0], [9.8, 257.0], [9.9, 258.0], [10.0, 260.0], [10.1, 261.0], [10.2, 262.0], [10.3, 263.0], [10.4, 265.0], [10.5, 266.0], [10.6, 268.0], [10.7, 269.0], [10.8, 270.0], [10.9, 272.0], [11.0, 274.0], [11.1, 275.0], [11.2, 276.0], [11.3, 277.0], [11.4, 280.0], [11.5, 280.0], [11.6, 283.0], [11.7, 284.0], [11.8, 285.0], [11.9, 287.0], [12.0, 288.0], [12.1, 290.0], [12.2, 291.0], [12.3, 293.0], [12.4, 295.0], [12.5, 297.0], [12.6, 298.0], [12.7, 299.0], [12.8, 301.0], [12.9, 303.0], [13.0, 304.0], [13.1, 305.0], [13.2, 308.0], [13.3, 309.0], [13.4, 310.0], [13.5, 311.0], [13.6, 313.0], [13.7, 314.0], [13.8, 315.0], [13.9, 316.0], [14.0, 317.0], [14.1, 319.0], [14.2, 321.0], [14.3, 323.0], [14.4, 323.0], [14.5, 325.0], [14.6, 327.0], [14.7, 328.0], [14.8, 330.0], [14.9, 331.0], [15.0, 332.0], [15.1, 334.0], [15.2, 335.0], [15.3, 337.0], [15.4, 338.0], [15.5, 339.0], [15.6, 341.0], [15.7, 342.0], [15.8, 343.0], [15.9, 344.0], [16.0, 345.0], [16.1, 346.0], [16.2, 347.0], [16.3, 348.0], [16.4, 349.0], [16.5, 350.0], [16.6, 351.0], [16.7, 352.0], [16.8, 353.0], [16.9, 354.0], [17.0, 356.0], [17.1, 356.0], [17.2, 357.0], [17.3, 358.0], [17.4, 360.0], [17.5, 361.0], [17.6, 362.0], [17.7, 363.0], [17.8, 365.0], [17.9, 366.0], [18.0, 368.0], [18.1, 369.0], [18.2, 370.0], [18.3, 372.0], [18.4, 372.0], [18.5, 374.0], [18.6, 375.0], [18.7, 376.0], [18.8, 377.0], [18.9, 377.0], [19.0, 378.0], [19.1, 379.0], [19.2, 380.0], [19.3, 380.0], [19.4, 382.0], [19.5, 382.0], [19.6, 383.0], [19.7, 384.0], [19.8, 385.0], [19.9, 385.0], [20.0, 386.0], [20.1, 387.0], [20.2, 387.0], [20.3, 389.0], [20.4, 389.0], [20.5, 390.0], [20.6, 391.0], [20.7, 391.0], [20.8, 392.0], [20.9, 394.0], [21.0, 394.0], [21.1, 396.0], [21.2, 396.0], [21.3, 397.0], [21.4, 397.0], [21.5, 398.0], [21.6, 399.0], [21.7, 400.0], [21.8, 400.0], [21.9, 401.0], [22.0, 401.0], [22.1, 402.0], [22.2, 403.0], [22.3, 404.0], [22.4, 404.0], [22.5, 405.0], [22.6, 405.0], [22.7, 406.0], [22.8, 406.0], [22.9, 407.0], [23.0, 408.0], [23.1, 408.0], [23.2, 409.0], [23.3, 409.0], [23.4, 410.0], [23.5, 410.0], [23.6, 411.0], [23.7, 411.0], [23.8, 412.0], [23.9, 413.0], [24.0, 413.0], [24.1, 414.0], [24.2, 414.0], [24.3, 415.0], [24.4, 416.0], [24.5, 416.0], [24.6, 417.0], [24.7, 418.0], [24.8, 418.0], [24.9, 419.0], [25.0, 419.0], [25.1, 420.0], [25.2, 420.0], [25.3, 421.0], [25.4, 421.0], [25.5, 422.0], [25.6, 422.0], [25.7, 423.0], [25.8, 424.0], [25.9, 424.0], [26.0, 425.0], [26.1, 425.0], [26.2, 426.0], [26.3, 426.0], [26.4, 427.0], [26.5, 427.0], [26.6, 428.0], [26.7, 428.0], [26.8, 429.0], [26.9, 429.0], [27.0, 430.0], [27.1, 430.0], [27.2, 431.0], [27.3, 431.0], [27.4, 432.0], [27.5, 432.0], [27.6, 433.0], [27.7, 433.0], [27.8, 434.0], [27.9, 435.0], [28.0, 435.0], [28.1, 435.0], [28.2, 436.0], [28.3, 437.0], [28.4, 437.0], [28.5, 437.0], [28.6, 438.0], [28.7, 438.0], [28.8, 439.0], [28.9, 439.0], [29.0, 440.0], [29.1, 440.0], [29.2, 441.0], [29.3, 441.0], [29.4, 442.0], [29.5, 443.0], [29.6, 443.0], [29.7, 444.0], [29.8, 444.0], [29.9, 445.0], [30.0, 446.0], [30.1, 446.0], [30.2, 447.0], [30.3, 448.0], [30.4, 448.0], [30.5, 449.0], [30.6, 449.0], [30.7, 450.0], [30.8, 450.0], [30.9, 450.0], [31.0, 451.0], [31.1, 451.0], [31.2, 452.0], [31.3, 452.0], [31.4, 452.0], [31.5, 453.0], [31.6, 453.0], [31.7, 454.0], [31.8, 454.0], [31.9, 455.0], [32.0, 455.0], [32.1, 456.0], [32.2, 456.0], [32.3, 456.0], [32.4, 457.0], [32.5, 457.0], [32.6, 458.0], [32.7, 459.0], [32.8, 459.0], [32.9, 459.0], [33.0, 460.0], [33.1, 460.0], [33.2, 461.0], [33.3, 461.0], [33.4, 462.0], [33.5, 462.0], [33.6, 462.0], [33.7, 463.0], [33.8, 463.0], [33.9, 464.0], [34.0, 465.0], [34.1, 465.0], [34.2, 466.0], [34.3, 466.0], [34.4, 466.0], [34.5, 467.0], [34.6, 467.0], [34.7, 467.0], [34.8, 468.0], [34.9, 468.0], [35.0, 469.0], [35.1, 469.0], [35.2, 470.0], [35.3, 470.0], [35.4, 471.0], [35.5, 471.0], [35.6, 471.0], [35.7, 472.0], [35.8, 473.0], [35.9, 473.0], [36.0, 474.0], [36.1, 474.0], [36.2, 475.0], [36.3, 475.0], [36.4, 476.0], [36.5, 476.0], [36.6, 477.0], [36.7, 477.0], [36.8, 478.0], [36.9, 479.0], [37.0, 479.0], [37.1, 479.0], [37.2, 480.0], [37.3, 481.0], [37.4, 481.0], [37.5, 481.0], [37.6, 482.0], [37.7, 482.0], [37.8, 483.0], [37.9, 483.0], [38.0, 484.0], [38.1, 485.0], [38.2, 485.0], [38.3, 485.0], [38.4, 486.0], [38.5, 487.0], [38.6, 487.0], [38.7, 488.0], [38.8, 488.0], [38.9, 489.0], [39.0, 489.0], [39.1, 490.0], [39.2, 491.0], [39.3, 491.0], [39.4, 491.0], [39.5, 492.0], [39.6, 492.0], [39.7, 493.0], [39.8, 494.0], [39.9, 494.0], [40.0, 494.0], [40.1, 495.0], [40.2, 495.0], [40.3, 495.0], [40.4, 496.0], [40.5, 496.0], [40.6, 497.0], [40.7, 497.0], [40.8, 498.0], [40.9, 498.0], [41.0, 499.0], [41.1, 500.0], [41.2, 500.0], [41.3, 501.0], [41.4, 501.0], [41.5, 502.0], [41.6, 502.0], [41.7, 503.0], [41.8, 503.0], [41.9, 504.0], [42.0, 504.0], [42.1, 505.0], [42.2, 505.0], [42.3, 505.0], [42.4, 506.0], [42.5, 506.0], [42.6, 507.0], [42.7, 507.0], [42.8, 508.0], [42.9, 508.0], [43.0, 509.0], [43.1, 510.0], [43.2, 510.0], [43.3, 511.0], [43.4, 511.0], [43.5, 512.0], [43.6, 512.0], [43.7, 513.0], [43.8, 513.0], [43.9, 514.0], [44.0, 514.0], [44.1, 516.0], [44.2, 516.0], [44.3, 517.0], [44.4, 517.0], [44.5, 518.0], [44.6, 518.0], [44.7, 519.0], [44.8, 519.0], [44.9, 520.0], [45.0, 521.0], [45.1, 521.0], [45.2, 522.0], [45.3, 522.0], [45.4, 522.0], [45.5, 523.0], [45.6, 523.0], [45.7, 524.0], [45.8, 524.0], [45.9, 525.0], [46.0, 526.0], [46.1, 526.0], [46.2, 527.0], [46.3, 527.0], [46.4, 528.0], [46.5, 528.0], [46.6, 529.0], [46.7, 529.0], [46.8, 530.0], [46.9, 531.0], [47.0, 531.0], [47.1, 532.0], [47.2, 533.0], [47.3, 533.0], [47.4, 534.0], [47.5, 534.0], [47.6, 535.0], [47.7, 536.0], [47.8, 536.0], [47.9, 536.0], [48.0, 537.0], [48.1, 538.0], [48.2, 538.0], [48.3, 538.0], [48.4, 539.0], [48.5, 540.0], [48.6, 540.0], [48.7, 541.0], [48.8, 541.0], [48.9, 542.0], [49.0, 543.0], [49.1, 544.0], [49.2, 544.0], [49.3, 545.0], [49.4, 546.0], [49.5, 546.0], [49.6, 547.0], [49.7, 548.0], [49.8, 549.0], [49.9, 550.0], [50.0, 550.0], [50.1, 551.0], [50.2, 551.0], [50.3, 553.0], [50.4, 553.0], [50.5, 554.0], [50.6, 555.0], [50.7, 555.0], [50.8, 556.0], [50.9, 556.0], [51.0, 557.0], [51.1, 558.0], [51.2, 559.0], [51.3, 559.0], [51.4, 560.0], [51.5, 561.0], [51.6, 561.0], [51.7, 562.0], [51.8, 563.0], [51.9, 563.0], [52.0, 564.0], [52.1, 565.0], [52.2, 566.0], [52.3, 567.0], [52.4, 567.0], [52.5, 568.0], [52.6, 569.0], [52.7, 570.0], [52.8, 570.0], [52.9, 571.0], [53.0, 572.0], [53.1, 573.0], [53.2, 573.0], [53.3, 574.0], [53.4, 574.0], [53.5, 575.0], [53.6, 576.0], [53.7, 576.0], [53.8, 578.0], [53.9, 579.0], [54.0, 580.0], [54.1, 581.0], [54.2, 582.0], [54.3, 583.0], [54.4, 584.0], [54.5, 584.0], [54.6, 586.0], [54.7, 587.0], [54.8, 587.0], [54.9, 588.0], [55.0, 589.0], [55.1, 590.0], [55.2, 590.0], [55.3, 591.0], [55.4, 592.0], [55.5, 593.0], [55.6, 593.0], [55.7, 594.0], [55.8, 595.0], [55.9, 597.0], [56.0, 598.0], [56.1, 599.0], [56.2, 600.0], [56.3, 601.0], [56.4, 602.0], [56.5, 602.0], [56.6, 604.0], [56.7, 605.0], [56.8, 606.0], [56.9, 607.0], [57.0, 609.0], [57.1, 610.0], [57.2, 611.0], [57.3, 613.0], [57.4, 614.0], [57.5, 615.0], [57.6, 617.0], [57.7, 618.0], [57.8, 619.0], [57.9, 620.0], [58.0, 621.0], [58.1, 623.0], [58.2, 625.0], [58.3, 626.0], [58.4, 628.0], [58.5, 630.0], [58.6, 632.0], [58.7, 634.0], [58.8, 635.0], [58.9, 636.0], [59.0, 640.0], [59.1, 641.0], [59.2, 643.0], [59.3, 644.0], [59.4, 647.0], [59.5, 650.0], [59.6, 652.0], [59.7, 656.0], [59.8, 658.0], [59.9, 660.0], [60.0, 662.0], [60.1, 666.0], [60.2, 668.0], [60.3, 673.0], [60.4, 676.0], [60.5, 681.0], [60.6, 687.0], [60.7, 695.0], [60.8, 705.0], [60.9, 713.0], [61.0, 723.0], [61.1, 735.0], [61.2, 748.0], [61.3, 768.0], [61.4, 796.0], [61.5, 819.0], [61.6, 840.0], [61.7, 874.0], [61.8, 887.0], [61.9, 909.0], [62.0, 913.0], [62.1, 933.0], [62.2, 938.0], [62.3, 945.0], [62.4, 953.0], [62.5, 956.0], [62.6, 965.0], [62.7, 972.0], [62.8, 976.0], [62.9, 985.0], [63.0, 989.0], [63.1, 993.0], [63.2, 996.0], [63.3, 1000.0], [63.4, 1005.0], [63.5, 1008.0], [63.6, 1019.0], [63.7, 1024.0], [63.8, 1026.0], [63.9, 1031.0], [64.0, 1034.0], [64.1, 1038.0], [64.2, 1043.0], [64.3, 1049.0], [64.4, 1054.0], [64.5, 1057.0], [64.6, 1060.0], [64.7, 1066.0], [64.8, 1070.0], [64.9, 1074.0], [65.0, 1076.0], [65.1, 1081.0], [65.2, 1088.0], [65.3, 1093.0], [65.4, 1099.0], [65.5, 1103.0], [65.6, 1105.0], [65.7, 1109.0], [65.8, 1114.0], [65.9, 1118.0], [66.0, 1121.0], [66.1, 1125.0], [66.2, 1129.0], [66.3, 1132.0], [66.4, 1136.0], [66.5, 1140.0], [66.6, 1145.0], [66.7, 1150.0], [66.8, 1154.0], [66.9, 1158.0], [67.0, 1163.0], [67.1, 1166.0], [67.2, 1169.0], [67.3, 1176.0], [67.4, 1181.0], [67.5, 1183.0], [67.6, 1189.0], [67.7, 1197.0], [67.8, 1202.0], [67.9, 1206.0], [68.0, 1210.0], [68.1, 1217.0], [68.2, 1221.0], [68.3, 1228.0], [68.4, 1232.0], [68.5, 1236.0], [68.6, 1239.0], [68.7, 1243.0], [68.8, 1247.0], [68.9, 1253.0], [69.0, 1258.0], [69.1, 1266.0], [69.2, 1268.0], [69.3, 1272.0], [69.4, 1276.0], [69.5, 1281.0], [69.6, 1286.0], [69.7, 1292.0], [69.8, 1301.0], [69.9, 1307.0], [70.0, 1315.0], [70.1, 1321.0], [70.2, 1325.0], [70.3, 1334.0], [70.4, 1340.0], [70.5, 1344.0], [70.6, 1350.0], [70.7, 1354.0], [70.8, 1360.0], [70.9, 1364.0], [71.0, 1368.0], [71.1, 1377.0], [71.2, 1384.0], [71.3, 1389.0], [71.4, 1392.0], [71.5, 1397.0], [71.6, 1400.0], [71.7, 1404.0], [71.8, 1408.0], [71.9, 1410.0], [72.0, 1415.0], [72.1, 1420.0], [72.2, 1424.0], [72.3, 1428.0], [72.4, 1432.0], [72.5, 1436.0], [72.6, 1439.0], [72.7, 1441.0], [72.8, 1444.0], [72.9, 1446.0], [73.0, 1448.0], [73.1, 1451.0], [73.2, 1454.0], [73.3, 1456.0], [73.4, 1458.0], [73.5, 1460.0], [73.6, 1462.0], [73.7, 1465.0], [73.8, 1468.0], [73.9, 1471.0], [74.0, 1472.0], [74.1, 1475.0], [74.2, 1475.0], [74.3, 1477.0], [74.4, 1480.0], [74.5, 1481.0], [74.6, 1483.0], [74.7, 1485.0], [74.8, 1487.0], [74.9, 1488.0], [75.0, 1490.0], [75.1, 1492.0], [75.2, 1494.0], [75.3, 1496.0], [75.4, 1497.0], [75.5, 1499.0], [75.6, 1500.0], [75.7, 1502.0], [75.8, 1505.0], [75.9, 1508.0], [76.0, 1510.0], [76.1, 1512.0], [76.2, 1514.0], [76.3, 1516.0], [76.4, 1517.0], [76.5, 1518.0], [76.6, 1520.0], [76.7, 1521.0], [76.8, 1524.0], [76.9, 1527.0], [77.0, 1528.0], [77.1, 1530.0], [77.2, 1531.0], [77.3, 1533.0], [77.4, 1534.0], [77.5, 1536.0], [77.6, 1538.0], [77.7, 1540.0], [77.8, 1541.0], [77.9, 1543.0], [78.0, 1545.0], [78.1, 1547.0], [78.2, 1549.0], [78.3, 1551.0], [78.4, 1554.0], [78.5, 1556.0], [78.6, 1559.0], [78.7, 1561.0], [78.8, 1563.0], [78.9, 1566.0], [79.0, 1569.0], [79.1, 1571.0], [79.2, 1573.0], [79.3, 1575.0], [79.4, 1577.0], [79.5, 1580.0], [79.6, 1582.0], [79.7, 1584.0], [79.8, 1588.0], [79.9, 1591.0], [80.0, 1597.0], [80.1, 1600.0], [80.2, 1604.0], [80.3, 1608.0], [80.4, 1613.0], [80.5, 1616.0], [80.6, 1619.0], [80.7, 1623.0], [80.8, 1627.0], [80.9, 1633.0], [81.0, 1638.0], [81.1, 1641.0], [81.2, 1647.0], [81.3, 1649.0], [81.4, 1654.0], [81.5, 1661.0], [81.6, 1669.0], [81.7, 1678.0], [81.8, 1688.0], [81.9, 1709.0], [82.0, 1719.0], [82.1, 1732.0], [82.2, 1754.0], [82.3, 1777.0], [82.4, 1809.0], [82.5, 1827.0], [82.6, 1835.0], [82.7, 1851.0], [82.8, 1858.0], [82.9, 1864.0], [83.0, 1870.0], [83.1, 1879.0], [83.2, 1885.0], [83.3, 1895.0], [83.4, 1906.0], [83.5, 1912.0], [83.6, 1918.0], [83.7, 1929.0], [83.8, 1937.0], [83.9, 1942.0], [84.0, 1948.0], [84.1, 1956.0], [84.2, 1960.0], [84.3, 1966.0], [84.4, 1971.0], [84.5, 1976.0], [84.6, 1983.0], [84.7, 1990.0], [84.8, 1998.0], [84.9, 2005.0], [85.0, 2012.0], [85.1, 2021.0], [85.2, 2025.0], [85.3, 2031.0], [85.4, 2038.0], [85.5, 2045.0], [85.6, 2050.0], [85.7, 2059.0], [85.8, 2070.0], [85.9, 2074.0], [86.0, 2085.0], [86.1, 2100.0], [86.2, 2115.0], [86.3, 2127.0], [86.4, 2148.0], [86.5, 2157.0], [86.6, 2174.0], [86.7, 2179.0], [86.8, 2209.0], [86.9, 2224.0], [87.0, 2248.0], [87.1, 2278.0], [87.2, 2315.0], [87.3, 2340.0], [87.4, 2358.0], [87.5, 2402.0], [87.6, 2415.0], [87.7, 2448.0], [87.8, 2477.0], [87.9, 2493.0], [88.0, 2535.0], [88.1, 2552.0], [88.2, 2595.0], [88.3, 2688.0], [88.4, 2797.0], [88.5, 2884.0], [88.6, 2957.0], [88.7, 3045.0], [88.8, 3145.0], [88.9, 3205.0], [89.0, 3249.0], [89.1, 3299.0], [89.2, 3379.0], [89.3, 3402.0], [89.4, 3425.0], [89.5, 3441.0], [89.6, 3449.0], [89.7, 3459.0], [89.8, 3463.0], [89.9, 3472.0], [90.0, 3477.0], [90.1, 3484.0], [90.2, 3489.0], [90.3, 3494.0], [90.4, 3499.0], [90.5, 3504.0], [90.6, 3509.0], [90.7, 3517.0], [90.8, 3522.0], [90.9, 3528.0], [91.0, 3534.0], [91.1, 3542.0], [91.2, 3548.0], [91.3, 3556.0], [91.4, 3563.0], [91.5, 3574.0], [91.6, 3581.0], [91.7, 3584.0], [91.8, 3594.0], [91.9, 3601.0], [92.0, 3608.0], [92.1, 3618.0], [92.2, 3627.0], [92.3, 3636.0], [92.4, 3642.0], [92.5, 3656.0], [92.6, 3663.0], [92.7, 3678.0], [92.8, 3689.0], [92.9, 3710.0], [93.0, 3729.0], [93.1, 3746.0], [93.2, 3781.0], [93.3, 3839.0], [93.4, 3864.0], [93.5, 3889.0], [93.6, 3925.0], [93.7, 3945.0], [93.8, 3971.0], [93.9, 3989.0], [94.0, 3999.0], [94.1, 4026.0], [94.2, 4058.0], [94.3, 4094.0], [94.4, 4136.0], [94.5, 4183.0], [94.6, 4238.0], [94.7, 4275.0], [94.8, 4313.0], [94.9, 4346.0], [95.0, 4408.0], [95.1, 4494.0], [95.2, 4650.0], [95.3, 4694.0], [95.4, 4897.0], [95.5, 5122.0], [95.6, 5431.0], [95.7, 5680.0], [95.8, 6314.0], [95.9, 7166.0], [96.0, 7228.0], [96.1, 7336.0], [96.2, 7414.0], [96.3, 7472.0], [96.4, 7488.0], [96.5, 7503.0], [96.6, 7514.0], [96.7, 7530.0], [96.8, 7540.0], [96.9, 7557.0], [97.0, 7589.0], [97.1, 7624.0], [97.2, 7646.0], [97.3, 7665.0], [97.4, 7683.0], [97.5, 7726.0], [97.6, 7932.0], [97.7, 8027.0], [97.8, 8077.0], [97.9, 8146.0], [98.0, 8173.0], [98.1, 8272.0], [98.2, 8508.0], [98.3, 8707.0], [98.4, 9727.0], [98.5, 11359.0], [98.6, 15209.0], [98.7, 15228.0], [98.8, 15439.0], [98.9, 15513.0], [99.0, 15570.0], [99.1, 15617.0], [99.2, 15708.0], [99.3, 16080.0], [99.4, 16240.0], [99.5, 21283.0], [99.6, 21615.0], [99.7, 22142.0], [99.8, 22564.0], [99.9, 24918.0], [100.0, 42063.0]], "isOverall": false, "label": "VerifyRoutingNumber - Not Found", "isController": false}, {"data": [[0.0, 87.0], [0.1, 89.0], [0.2, 90.0], [0.3, 91.0], [0.4, 91.0], [0.5, 92.0], [0.6, 92.0], [0.7, 93.0], [0.8, 93.0], [0.9, 94.0], [1.0, 94.0], [1.1, 95.0], [1.2, 95.0], [1.3, 96.0], [1.4, 96.0], [1.5, 96.0], [1.6, 97.0], [1.7, 97.0], [1.8, 97.0], [1.9, 97.0], [2.0, 98.0], [2.1, 98.0], [2.2, 99.0], [2.3, 99.0], [2.4, 99.0], [2.5, 99.0], [2.6, 100.0], [2.7, 100.0], [2.8, 100.0], [2.9, 101.0], [3.0, 101.0], [3.1, 102.0], [3.2, 102.0], [3.3, 102.0], [3.4, 103.0], [3.5, 103.0], [3.6, 103.0], [3.7, 103.0], [3.8, 104.0], [3.9, 104.0], [4.0, 104.0], [4.1, 105.0], [4.2, 105.0], [4.3, 105.0], [4.4, 105.0], [4.5, 106.0], [4.6, 106.0], [4.7, 106.0], [4.8, 106.0], [4.9, 107.0], [5.0, 107.0], [5.1, 107.0], [5.2, 108.0], [5.3, 108.0], [5.4, 108.0], [5.5, 109.0], [5.6, 109.0], [5.7, 109.0], [5.8, 110.0], [5.9, 110.0], [6.0, 111.0], [6.1, 111.0], [6.2, 111.0], [6.3, 112.0], [6.4, 112.0], [6.5, 113.0], [6.6, 113.0], [6.7, 114.0], [6.8, 114.0], [6.9, 114.0], [7.0, 115.0], [7.1, 115.0], [7.2, 115.0], [7.3, 116.0], [7.4, 117.0], [7.5, 117.0], [7.6, 118.0], [7.7, 118.0], [7.8, 119.0], [7.9, 119.0], [8.0, 120.0], [8.1, 121.0], [8.2, 121.0], [8.3, 122.0], [8.4, 123.0], [8.5, 124.0], [8.6, 125.0], [8.7, 125.0], [8.8, 126.0], [8.9, 126.0], [9.0, 127.0], [9.1, 128.0], [9.2, 129.0], [9.3, 129.0], [9.4, 130.0], [9.5, 130.0], [9.6, 131.0], [9.7, 132.0], [9.8, 133.0], [9.9, 133.0], [10.0, 135.0], [10.1, 135.0], [10.2, 136.0], [10.3, 136.0], [10.4, 137.0], [10.5, 137.0], [10.6, 138.0], [10.7, 139.0], [10.8, 140.0], [10.9, 141.0], [11.0, 141.0], [11.1, 141.0], [11.2, 142.0], [11.3, 143.0], [11.4, 143.0], [11.5, 144.0], [11.6, 144.0], [11.7, 145.0], [11.8, 146.0], [11.9, 147.0], [12.0, 148.0], [12.1, 148.0], [12.2, 148.0], [12.3, 149.0], [12.4, 150.0], [12.5, 150.0], [12.6, 151.0], [12.7, 151.0], [12.8, 152.0], [12.9, 152.0], [13.0, 153.0], [13.1, 153.0], [13.2, 154.0], [13.3, 155.0], [13.4, 155.0], [13.5, 156.0], [13.6, 156.0], [13.7, 156.0], [13.8, 157.0], [13.9, 157.0], [14.0, 158.0], [14.1, 159.0], [14.2, 159.0], [14.3, 160.0], [14.4, 160.0], [14.5, 161.0], [14.6, 161.0], [14.7, 162.0], [14.8, 162.0], [14.9, 163.0], [15.0, 163.0], [15.1, 164.0], [15.2, 165.0], [15.3, 165.0], [15.4, 165.0], [15.5, 166.0], [15.6, 166.0], [15.7, 166.0], [15.8, 167.0], [15.9, 167.0], [16.0, 168.0], [16.1, 168.0], [16.2, 169.0], [16.3, 169.0], [16.4, 170.0], [16.5, 170.0], [16.6, 170.0], [16.7, 171.0], [16.8, 171.0], [16.9, 172.0], [17.0, 172.0], [17.1, 172.0], [17.2, 173.0], [17.3, 174.0], [17.4, 174.0], [17.5, 174.0], [17.6, 174.0], [17.7, 175.0], [17.8, 176.0], [17.9, 176.0], [18.0, 177.0], [18.1, 177.0], [18.2, 177.0], [18.3, 177.0], [18.4, 178.0], [18.5, 178.0], [18.6, 179.0], [18.7, 179.0], [18.8, 179.0], [18.9, 180.0], [19.0, 180.0], [19.1, 180.0], [19.2, 181.0], [19.3, 181.0], [19.4, 182.0], [19.5, 182.0], [19.6, 182.0], [19.7, 183.0], [19.8, 183.0], [19.9, 184.0], [20.0, 184.0], [20.1, 185.0], [20.2, 185.0], [20.3, 186.0], [20.4, 186.0], [20.5, 186.0], [20.6, 186.0], [20.7, 187.0], [20.8, 187.0], [20.9, 187.0], [21.0, 188.0], [21.1, 188.0], [21.2, 189.0], [21.3, 189.0], [21.4, 190.0], [21.5, 190.0], [21.6, 190.0], [21.7, 190.0], [21.8, 191.0], [21.9, 191.0], [22.0, 191.0], [22.1, 192.0], [22.2, 192.0], [22.3, 192.0], [22.4, 193.0], [22.5, 193.0], [22.6, 193.0], [22.7, 193.0], [22.8, 194.0], [22.9, 194.0], [23.0, 194.0], [23.1, 194.0], [23.2, 195.0], [23.3, 195.0], [23.4, 195.0], [23.5, 195.0], [23.6, 196.0], [23.7, 196.0], [23.8, 196.0], [23.9, 196.0], [24.0, 197.0], [24.1, 197.0], [24.2, 197.0], [24.3, 198.0], [24.4, 198.0], [24.5, 198.0], [24.6, 199.0], [24.7, 199.0], [24.8, 199.0], [24.9, 199.0], [25.0, 200.0], [25.1, 200.0], [25.2, 200.0], [25.3, 200.0], [25.4, 201.0], [25.5, 201.0], [25.6, 201.0], [25.7, 201.0], [25.8, 202.0], [25.9, 202.0], [26.0, 202.0], [26.1, 203.0], [26.2, 203.0], [26.3, 203.0], [26.4, 203.0], [26.5, 204.0], [26.6, 204.0], [26.7, 204.0], [26.8, 204.0], [26.9, 205.0], [27.0, 205.0], [27.1, 205.0], [27.2, 205.0], [27.3, 206.0], [27.4, 206.0], [27.5, 206.0], [27.6, 206.0], [27.7, 206.0], [27.8, 207.0], [27.9, 207.0], [28.0, 207.0], [28.1, 207.0], [28.2, 207.0], [28.3, 208.0], [28.4, 208.0], [28.5, 208.0], [28.6, 209.0], [28.7, 209.0], [28.8, 209.0], [28.9, 209.0], [29.0, 209.0], [29.1, 210.0], [29.2, 210.0], [29.3, 210.0], [29.4, 210.0], [29.5, 210.0], [29.6, 211.0], [29.7, 211.0], [29.8, 211.0], [29.9, 211.0], [30.0, 212.0], [30.1, 212.0], [30.2, 212.0], [30.3, 212.0], [30.4, 213.0], [30.5, 213.0], [30.6, 213.0], [30.7, 213.0], [30.8, 213.0], [30.9, 214.0], [31.0, 214.0], [31.1, 214.0], [31.2, 214.0], [31.3, 214.0], [31.4, 214.0], [31.5, 215.0], [31.6, 215.0], [31.7, 215.0], [31.8, 215.0], [31.9, 215.0], [32.0, 216.0], [32.1, 216.0], [32.2, 216.0], [32.3, 216.0], [32.4, 216.0], [32.5, 217.0], [32.6, 217.0], [32.7, 217.0], [32.8, 217.0], [32.9, 217.0], [33.0, 218.0], [33.1, 218.0], [33.2, 218.0], [33.3, 218.0], [33.4, 218.0], [33.5, 219.0], [33.6, 219.0], [33.7, 219.0], [33.8, 219.0], [33.9, 219.0], [34.0, 219.0], [34.1, 220.0], [34.2, 220.0], [34.3, 220.0], [34.4, 220.0], [34.5, 220.0], [34.6, 220.0], [34.7, 221.0], [34.8, 221.0], [34.9, 221.0], [35.0, 221.0], [35.1, 222.0], [35.2, 222.0], [35.3, 222.0], [35.4, 222.0], [35.5, 222.0], [35.6, 222.0], [35.7, 223.0], [35.8, 223.0], [35.9, 223.0], [36.0, 223.0], [36.1, 224.0], [36.2, 224.0], [36.3, 224.0], [36.4, 224.0], [36.5, 224.0], [36.6, 224.0], [36.7, 225.0], [36.8, 225.0], [36.9, 225.0], [37.0, 225.0], [37.1, 225.0], [37.2, 226.0], [37.3, 226.0], [37.4, 226.0], [37.5, 226.0], [37.6, 226.0], [37.7, 226.0], [37.8, 226.0], [37.9, 227.0], [38.0, 227.0], [38.1, 227.0], [38.2, 227.0], [38.3, 227.0], [38.4, 228.0], [38.5, 228.0], [38.6, 228.0], [38.7, 228.0], [38.8, 228.0], [38.9, 229.0], [39.0, 229.0], [39.1, 229.0], [39.2, 229.0], [39.3, 229.0], [39.4, 229.0], [39.5, 230.0], [39.6, 230.0], [39.7, 230.0], [39.8, 230.0], [39.9, 231.0], [40.0, 231.0], [40.1, 231.0], [40.2, 231.0], [40.3, 231.0], [40.4, 232.0], [40.5, 232.0], [40.6, 232.0], [40.7, 232.0], [40.8, 232.0], [40.9, 233.0], [41.0, 233.0], [41.1, 233.0], [41.2, 233.0], [41.3, 233.0], [41.4, 233.0], [41.5, 234.0], [41.6, 234.0], [41.7, 234.0], [41.8, 234.0], [41.9, 234.0], [42.0, 234.0], [42.1, 235.0], [42.2, 235.0], [42.3, 235.0], [42.4, 235.0], [42.5, 235.0], [42.6, 235.0], [42.7, 236.0], [42.8, 236.0], [42.9, 236.0], [43.0, 236.0], [43.1, 236.0], [43.2, 236.0], [43.3, 236.0], [43.4, 236.0], [43.5, 237.0], [43.6, 237.0], [43.7, 237.0], [43.8, 237.0], [43.9, 237.0], [44.0, 238.0], [44.1, 238.0], [44.2, 238.0], [44.3, 238.0], [44.4, 238.0], [44.5, 238.0], [44.6, 239.0], [44.7, 239.0], [44.8, 239.0], [44.9, 239.0], [45.0, 239.0], [45.1, 240.0], [45.2, 240.0], [45.3, 240.0], [45.4, 240.0], [45.5, 240.0], [45.6, 240.0], [45.7, 240.0], [45.8, 241.0], [45.9, 241.0], [46.0, 241.0], [46.1, 241.0], [46.2, 241.0], [46.3, 241.0], [46.4, 242.0], [46.5, 242.0], [46.6, 242.0], [46.7, 242.0], [46.8, 242.0], [46.9, 242.0], [47.0, 242.0], [47.1, 243.0], [47.2, 243.0], [47.3, 243.0], [47.4, 243.0], [47.5, 243.0], [47.6, 244.0], [47.7, 244.0], [47.8, 244.0], [47.9, 244.0], [48.0, 244.0], [48.1, 245.0], [48.2, 245.0], [48.3, 245.0], [48.4, 245.0], [48.5, 245.0], [48.6, 246.0], [48.7, 246.0], [48.8, 246.0], [48.9, 246.0], [49.0, 246.0], [49.1, 246.0], [49.2, 247.0], [49.3, 247.0], [49.4, 247.0], [49.5, 247.0], [49.6, 247.0], [49.7, 248.0], [49.8, 248.0], [49.9, 248.0], [50.0, 248.0], [50.1, 248.0], [50.2, 248.0], [50.3, 249.0], [50.4, 249.0], [50.5, 249.0], [50.6, 249.0], [50.7, 249.0], [50.8, 250.0], [50.9, 250.0], [51.0, 250.0], [51.1, 250.0], [51.2, 250.0], [51.3, 250.0], [51.4, 251.0], [51.5, 251.0], [51.6, 251.0], [51.7, 251.0], [51.8, 251.0], [51.9, 252.0], [52.0, 252.0], [52.1, 252.0], [52.2, 252.0], [52.3, 252.0], [52.4, 253.0], [52.5, 253.0], [52.6, 253.0], [52.7, 253.0], [52.8, 253.0], [52.9, 253.0], [53.0, 254.0], [53.1, 254.0], [53.2, 254.0], [53.3, 254.0], [53.4, 254.0], [53.5, 255.0], [53.6, 255.0], [53.7, 255.0], [53.8, 255.0], [53.9, 255.0], [54.0, 255.0], [54.1, 255.0], [54.2, 256.0], [54.3, 256.0], [54.4, 256.0], [54.5, 256.0], [54.6, 256.0], [54.7, 257.0], [54.8, 257.0], [54.9, 257.0], [55.0, 257.0], [55.1, 258.0], [55.2, 258.0], [55.3, 258.0], [55.4, 258.0], [55.5, 258.0], [55.6, 259.0], [55.7, 259.0], [55.8, 259.0], [55.9, 259.0], [56.0, 259.0], [56.1, 260.0], [56.2, 260.0], [56.3, 260.0], [56.4, 260.0], [56.5, 260.0], [56.6, 261.0], [56.7, 261.0], [56.8, 261.0], [56.9, 261.0], [57.0, 262.0], [57.1, 262.0], [57.2, 262.0], [57.3, 262.0], [57.4, 262.0], [57.5, 262.0], [57.6, 262.0], [57.7, 263.0], [57.8, 263.0], [57.9, 263.0], [58.0, 263.0], [58.1, 264.0], [58.2, 264.0], [58.3, 264.0], [58.4, 264.0], [58.5, 264.0], [58.6, 264.0], [58.7, 265.0], [58.8, 265.0], [58.9, 265.0], [59.0, 265.0], [59.1, 266.0], [59.2, 266.0], [59.3, 266.0], [59.4, 266.0], [59.5, 266.0], [59.6, 266.0], [59.7, 267.0], [59.8, 267.0], [59.9, 267.0], [60.0, 267.0], [60.1, 268.0], [60.2, 268.0], [60.3, 268.0], [60.4, 269.0], [60.5, 269.0], [60.6, 269.0], [60.7, 269.0], [60.8, 269.0], [60.9, 270.0], [61.0, 270.0], [61.1, 270.0], [61.2, 271.0], [61.3, 271.0], [61.4, 271.0], [61.5, 271.0], [61.6, 272.0], [61.7, 272.0], [61.8, 272.0], [61.9, 272.0], [62.0, 272.0], [62.1, 273.0], [62.2, 273.0], [62.3, 273.0], [62.4, 273.0], [62.5, 274.0], [62.6, 274.0], [62.7, 274.0], [62.8, 274.0], [62.9, 275.0], [63.0, 275.0], [63.1, 275.0], [63.2, 275.0], [63.3, 275.0], [63.4, 275.0], [63.5, 276.0], [63.6, 276.0], [63.7, 276.0], [63.8, 277.0], [63.9, 277.0], [64.0, 277.0], [64.1, 277.0], [64.2, 278.0], [64.3, 278.0], [64.4, 278.0], [64.5, 278.0], [64.6, 279.0], [64.7, 279.0], [64.8, 279.0], [64.9, 280.0], [65.0, 280.0], [65.1, 280.0], [65.2, 280.0], [65.3, 280.0], [65.4, 281.0], [65.5, 281.0], [65.6, 281.0], [65.7, 281.0], [65.8, 282.0], [65.9, 282.0], [66.0, 282.0], [66.1, 283.0], [66.2, 283.0], [66.3, 283.0], [66.4, 283.0], [66.5, 284.0], [66.6, 284.0], [66.7, 284.0], [66.8, 284.0], [66.9, 285.0], [67.0, 285.0], [67.1, 285.0], [67.2, 286.0], [67.3, 286.0], [67.4, 286.0], [67.5, 286.0], [67.6, 287.0], [67.7, 287.0], [67.8, 287.0], [67.9, 288.0], [68.0, 288.0], [68.1, 288.0], [68.2, 288.0], [68.3, 289.0], [68.4, 289.0], [68.5, 289.0], [68.6, 290.0], [68.7, 290.0], [68.8, 290.0], [68.9, 290.0], [69.0, 290.0], [69.1, 291.0], [69.2, 291.0], [69.3, 291.0], [69.4, 292.0], [69.5, 292.0], [69.6, 292.0], [69.7, 292.0], [69.8, 293.0], [69.9, 293.0], [70.0, 294.0], [70.1, 294.0], [70.2, 294.0], [70.3, 294.0], [70.4, 295.0], [70.5, 295.0], [70.6, 295.0], [70.7, 295.0], [70.8, 295.0], [70.9, 296.0], [71.0, 296.0], [71.1, 296.0], [71.2, 297.0], [71.3, 297.0], [71.4, 297.0], [71.5, 298.0], [71.6, 298.0], [71.7, 298.0], [71.8, 298.0], [71.9, 299.0], [72.0, 299.0], [72.1, 299.0], [72.2, 300.0], [72.3, 300.0], [72.4, 300.0], [72.5, 301.0], [72.6, 301.0], [72.7, 301.0], [72.8, 302.0], [72.9, 302.0], [73.0, 302.0], [73.1, 303.0], [73.2, 303.0], [73.3, 303.0], [73.4, 304.0], [73.5, 304.0], [73.6, 304.0], [73.7, 304.0], [73.8, 305.0], [73.9, 305.0], [74.0, 305.0], [74.1, 306.0], [74.2, 306.0], [74.3, 306.0], [74.4, 307.0], [74.5, 307.0], [74.6, 307.0], [74.7, 308.0], [74.8, 308.0], [74.9, 309.0], [75.0, 309.0], [75.1, 309.0], [75.2, 309.0], [75.3, 310.0], [75.4, 310.0], [75.5, 311.0], [75.6, 311.0], [75.7, 311.0], [75.8, 311.0], [75.9, 312.0], [76.0, 312.0], [76.1, 312.0], [76.2, 313.0], [76.3, 313.0], [76.4, 313.0], [76.5, 314.0], [76.6, 314.0], [76.7, 314.0], [76.8, 315.0], [76.9, 315.0], [77.0, 315.0], [77.1, 315.0], [77.2, 316.0], [77.3, 316.0], [77.4, 316.0], [77.5, 317.0], [77.6, 317.0], [77.7, 317.0], [77.8, 318.0], [77.9, 318.0], [78.0, 318.0], [78.1, 319.0], [78.2, 319.0], [78.3, 320.0], [78.4, 320.0], [78.5, 320.0], [78.6, 321.0], [78.7, 321.0], [78.8, 322.0], [78.9, 322.0], [79.0, 323.0], [79.1, 323.0], [79.2, 324.0], [79.3, 324.0], [79.4, 325.0], [79.5, 325.0], [79.6, 326.0], [79.7, 326.0], [79.8, 326.0], [79.9, 327.0], [80.0, 327.0], [80.1, 328.0], [80.2, 328.0], [80.3, 329.0], [80.4, 329.0], [80.5, 329.0], [80.6, 330.0], [80.7, 330.0], [80.8, 331.0], [80.9, 331.0], [81.0, 332.0], [81.1, 332.0], [81.2, 332.0], [81.3, 333.0], [81.4, 334.0], [81.5, 334.0], [81.6, 335.0], [81.7, 336.0], [81.8, 336.0], [81.9, 337.0], [82.0, 338.0], [82.1, 338.0], [82.2, 339.0], [82.3, 339.0], [82.4, 340.0], [82.5, 340.0], [82.6, 341.0], [82.7, 341.0], [82.8, 342.0], [82.9, 343.0], [83.0, 344.0], [83.1, 344.0], [83.2, 345.0], [83.3, 346.0], [83.4, 346.0], [83.5, 347.0], [83.6, 348.0], [83.7, 348.0], [83.8, 349.0], [83.9, 350.0], [84.0, 350.0], [84.1, 351.0], [84.2, 351.0], [84.3, 352.0], [84.4, 353.0], [84.5, 354.0], [84.6, 355.0], [84.7, 356.0], [84.8, 357.0], [84.9, 357.0], [85.0, 358.0], [85.1, 359.0], [85.2, 359.0], [85.3, 360.0], [85.4, 361.0], [85.5, 362.0], [85.6, 363.0], [85.7, 364.0], [85.8, 365.0], [85.9, 366.0], [86.0, 367.0], [86.1, 368.0], [86.2, 369.0], [86.3, 370.0], [86.4, 371.0], [86.5, 372.0], [86.6, 373.0], [86.7, 374.0], [86.8, 374.0], [86.9, 376.0], [87.0, 378.0], [87.1, 379.0], [87.2, 380.0], [87.3, 382.0], [87.4, 383.0], [87.5, 385.0], [87.6, 386.0], [87.7, 388.0], [87.8, 389.0], [87.9, 392.0], [88.0, 395.0], [88.1, 397.0], [88.2, 400.0], [88.3, 403.0], [88.4, 406.0], [88.5, 408.0], [88.6, 410.0], [88.7, 414.0], [88.8, 417.0], [88.9, 419.0], [89.0, 424.0], [89.1, 430.0], [89.2, 434.0], [89.3, 440.0], [89.4, 445.0], [89.5, 449.0], [89.6, 459.0], [89.7, 473.0], [89.8, 485.0], [89.9, 505.0], [90.0, 544.0], [90.1, 579.0], [90.2, 608.0], [90.3, 628.0], [90.4, 642.0], [90.5, 649.0], [90.6, 660.0], [90.7, 673.0], [90.8, 684.0], [90.9, 688.0], [91.0, 694.0], [91.1, 703.0], [91.2, 710.0], [91.3, 715.0], [91.4, 719.0], [91.5, 723.0], [91.6, 727.0], [91.7, 734.0], [91.8, 739.0], [91.9, 745.0], [92.0, 748.0], [92.1, 752.0], [92.2, 759.0], [92.3, 762.0], [92.4, 765.0], [92.5, 771.0], [92.6, 775.0], [92.7, 778.0], [92.8, 779.0], [92.9, 785.0], [93.0, 790.0], [93.1, 795.0], [93.2, 800.0], [93.3, 803.0], [93.4, 806.0], [93.5, 809.0], [93.6, 815.0], [93.7, 818.0], [93.8, 822.0], [93.9, 825.0], [94.0, 828.0], [94.1, 833.0], [94.2, 838.0], [94.3, 843.0], [94.4, 847.0], [94.5, 851.0], [94.6, 856.0], [94.7, 858.0], [94.8, 863.0], [94.9, 865.0], [95.0, 868.0], [95.1, 873.0], [95.2, 876.0], [95.3, 880.0], [95.4, 886.0], [95.5, 890.0], [95.6, 894.0], [95.7, 899.0], [95.8, 904.0], [95.9, 913.0], [96.0, 919.0], [96.1, 925.0], [96.2, 930.0], [96.3, 937.0], [96.4, 944.0], [96.5, 948.0], [96.6, 951.0], [96.7, 961.0], [96.8, 971.0], [96.9, 980.0], [97.0, 989.0], [97.1, 1003.0], [97.2, 1016.0], [97.3, 1024.0], [97.4, 1046.0], [97.5, 1057.0], [97.6, 1069.0], [97.7, 1091.0], [97.8, 1133.0], [97.9, 1192.0], [98.0, 1229.0], [98.1, 1270.0], [98.2, 1318.0], [98.3, 1366.0], [98.4, 1400.0], [98.5, 1449.0], [98.6, 1500.0], [98.7, 1539.0], [98.8, 1575.0], [98.9, 1671.0], [99.0, 1733.0], [99.1, 1786.0], [99.2, 1851.0], [99.3, 1910.0], [99.4, 2046.0], [99.5, 2381.0], [99.6, 2644.0], [99.7, 2991.0], [99.8, 3317.0], [99.9, 5295.0]], "isOverall": false, "label": "VerifyRoutingNumber - Success", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 4851.0, "series": [{"data": [[100.0, 513.0], [36500.0, 1.0], [200.0, 813.0], [300.0, 933.0], [400.0, 2018.0], [500.0, 1574.0], [600.0, 476.0], [700.0, 72.0], [800.0, 45.0], [900.0, 147.0], [1000.0, 224.0], [1100.0, 239.0], [1200.0, 213.0], [1300.0, 189.0], [1400.0, 413.0], [1500.0, 471.0], [1600.0, 181.0], [1700.0, 58.0], [1800.0, 101.0], [1900.0, 156.0], [2000.0, 130.0], [2100.0, 72.0], [2200.0, 37.0], [2300.0, 36.0], [2400.0, 43.0], [2500.0, 34.0], [2600.0, 9.0], [2700.0, 9.0], [2800.0, 12.0], [2900.0, 13.0], [3000.0, 12.0], [3100.0, 14.0], [3300.0, 18.0], [3200.0, 22.0], [3400.0, 118.0], [3500.0, 154.0], [3700.0, 38.0], [3600.0, 101.0], [3800.0, 31.0], [3900.0, 51.0], [4000.0, 32.0], [4100.0, 23.0], [4300.0, 25.0], [4200.0, 22.0], [4500.0, 6.0], [4400.0, 13.0], [4600.0, 14.0], [4700.0, 8.0], [4800.0, 3.0], [5000.0, 5.0], [4900.0, 4.0], [5100.0, 5.0], [5300.0, 1.0], [5200.0, 3.0], [5400.0, 6.0], [5600.0, 4.0], [5500.0, 5.0], [5800.0, 2.0], [5700.0, 2.0], [5900.0, 1.0], [6300.0, 3.0], [6200.0, 1.0], [6600.0, 2.0], [6400.0, 2.0], [6500.0, 3.0], [6700.0, 1.0], [7100.0, 5.0], [7000.0, 1.0], [7300.0, 12.0], [7400.0, 29.0], [7200.0, 14.0], [7500.0, 56.0], [7600.0, 45.0], [7900.0, 11.0], [7800.0, 4.0], [7700.0, 9.0], [8000.0, 16.0], [8100.0, 23.0], [8500.0, 8.0], [8700.0, 3.0], [8200.0, 8.0], [8300.0, 4.0], [8600.0, 4.0], [8400.0, 1.0], [8900.0, 4.0], [9000.0, 2.0], [9200.0, 1.0], [9500.0, 1.0], [9700.0, 4.0], [9800.0, 2.0], [10100.0, 1.0], [10400.0, 1.0], [11100.0, 2.0], [11300.0, 1.0], [11500.0, 1.0], [12100.0, 1.0], [13900.0, 1.0], [15200.0, 22.0], [15100.0, 3.0], [15300.0, 2.0], [15500.0, 20.0], [15400.0, 8.0], [15600.0, 14.0], [15700.0, 3.0], [15800.0, 1.0], [15900.0, 5.0], [16000.0, 5.0], [16100.0, 6.0], [16300.0, 1.0], [16200.0, 2.0], [16600.0, 1.0], [17200.0, 1.0], [16500.0, 1.0], [16400.0, 1.0], [19300.0, 1.0], [21400.0, 6.0], [21500.0, 2.0], [21300.0, 1.0], [21200.0, 5.0], [21600.0, 4.0], [22200.0, 3.0], [22400.0, 3.0], [22000.0, 1.0], [22100.0, 3.0], [21800.0, 1.0], [22500.0, 8.0], [21700.0, 2.0], [22600.0, 1.0], [23100.0, 1.0], [23000.0, 1.0], [24500.0, 1.0], [23700.0, 1.0], [24200.0, 1.0], [25100.0, 1.0], [25500.0, 1.0], [24900.0, 1.0], [28400.0, 4.0], [28300.0, 1.0], [36200.0, 1.0], [42000.0, 1.0]], "isOverall": false, "label": "VerifyRoutingNumber - Not Found", "isController": false}, {"data": [[0.0, 257.0], [600.0, 93.0], [700.0, 220.0], [800.0, 259.0], [900.0, 139.0], [1000.0, 67.0], [1100.0, 22.0], [1200.0, 24.0], [1300.0, 23.0], [1400.0, 20.0], [1500.0, 26.0], [1600.0, 11.0], [1700.0, 20.0], [1800.0, 16.0], [1900.0, 8.0], [2000.0, 6.0], [2100.0, 3.0], [2300.0, 2.0], [2200.0, 2.0], [2400.0, 4.0], [2500.0, 4.0], [2600.0, 4.0], [2800.0, 3.0], [2700.0, 3.0], [2900.0, 3.0], [3000.0, 2.0], [3100.0, 3.0], [3200.0, 4.0], [3300.0, 4.0], [3400.0, 1.0], [3600.0, 2.0], [3800.0, 1.0], [4200.0, 1.0], [4900.0, 1.0], [5200.0, 1.0], [5600.0, 1.0], [5500.0, 2.0], [5900.0, 1.0], [6300.0, 1.0], [6400.0, 1.0], [7600.0, 1.0], [7500.0, 1.0], [8700.0, 1.0], [16200.0, 1.0], [100.0, 2304.0], [200.0, 4851.0], [300.0, 1642.0], [400.0, 174.0], [500.0, 27.0]], "isOverall": false, "label": "VerifyRoutingNumber - Success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 42000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 13524.0, "series": [{"data": [[0.0, 13524.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4474.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2682.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 26.402061855670116, "minX": 1.68904242E12, "maxY": 156.1433772052648, "series": [{"data": [[1.6890426E12, 156.1433772052648], [1.68904242E12, 26.402061855670116], [1.68904254E12, 120.3432908122074], [1.68904248E12, 70.6752925663427]], "isOverall": false, "label": "ROUTING_NUMBER", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6890426E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 100.08823529411765, "minX": 1.0, "maxY": 42063.0, "series": [{"data": [[2.0, 4201.777777777778], [3.0, 1570.7272727272727], [4.0, 1071.0], [5.0, 997.2631578947369], [6.0, 799.0], [7.0, 706.8620689655172], [8.0, 632.6176470588235], [9.0, 380.86486486486484], [10.0, 783.5135135135135], [11.0, 359.78571428571433], [12.0, 496.6170212765958], [13.0, 334.44230769230774], [14.0, 457.98245614035085], [15.0, 449.5254237288135], [16.0, 429.63076923076926], [17.0, 292.7], [18.0, 455.3870967741936], [19.0, 468.2459016393443], [20.0, 238.05000000000004], [21.0, 589.9397590361447], [22.0, 473.1911764705883], [23.0, 561.8970588235295], [24.0, 380.95522388059703], [25.0, 527.9230769230769], [26.0, 379.6527777777777], [27.0, 470.07792207792215], [28.0, 488.6266666666668], [29.0, 535.3623188405796], [30.0, 431.89705882352945], [31.0, 379.02564102564116], [32.0, 527.6393442622953], [33.0, 472.47222222222223], [34.0, 393.75384615384615], [35.0, 733.7407407407409], [36.0, 598.1285714285715], [37.0, 521.323943661972], [38.0, 656.2295081967214], [39.0, 516.7183098591548], [40.0, 568.8450704225354], [41.0, 851.6111111111111], [42.0, 1223.5652173913043], [43.0, 680.5942028985507], [44.0, 801.957746478873], [45.0, 647.4032258064517], [46.0, 649.9855072463768], [47.0, 1562.6428571428573], [48.0, 2008.2105263157896], [49.0, 2002.7741935483873], [50.0, 810.24], [51.0, 606.0882352941178], [52.0, 1614.5890410958905], [53.0, 565.4935064935069], [54.0, 918.7230769230769], [55.0, 919.6315789473686], [56.0, 718.8421052631578], [57.0, 656.7659574468086], [58.0, 1729.35], [59.0, 1199.8450704225352], [60.0, 1138.3750000000005], [61.0, 881.8225806451612], [62.0, 1033.119402985074], [63.0, 947.2467532467538], [64.0, 712.267605633803], [65.0, 798.7083333333331], [66.0, 787.2028985507245], [67.0, 803.6621621621625], [68.0, 903.6111111111112], [69.0, 652.768115942029], [70.0, 748.1285714285713], [71.0, 1197.2500000000005], [72.0, 880.7142857142858], [73.0, 978.8630136986304], [74.0, 844.3939393939396], [75.0, 835.5588235294118], [76.0, 1470.9814814814813], [77.0, 2329.947368421053], [78.0, 1316.8666666666663], [79.0, 2069.9152542372876], [80.0, 944.1857142857144], [81.0, 1209.030303030303], [82.0, 2185.1029411764703], [83.0, 1949.4029850746278], [84.0, 1391.1549295774648], [85.0, 1170.5245901639346], [86.0, 1302.1285714285718], [87.0, 1012.0153846153844], [88.0, 1114.6470588235293], [89.0, 1428.553846153846], [90.0, 1282.6833333333338], [91.0, 1284.042253521127], [92.0, 1060.782608695652], [93.0, 1482.7846153846158], [94.0, 1438.6290322580649], [95.0, 1278.4861111111109], [96.0, 1800.3278688524586], [97.0, 1726.455882352941], [98.0, 1348.5500000000002], [99.0, 1388.96875], [100.0, 1118.8484848484848], [101.0, 1803.9841269841265], [102.0, 1668.6212121212122], [103.0, 1590.314285714286], [104.0, 1670.0597014925372], [105.0, 1669.1323529411764], [106.0, 1088.1967213114754], [107.0, 2212.118644067796], [108.0, 1161.9230769230765], [109.0, 1744.6406249999998], [110.0, 1577.7031250000005], [111.0, 1214.4029850746272], [112.0, 1910.2318840579708], [113.0, 2204.9302325581402], [114.0, 1873.5000000000002], [115.0, 2603.0704225352115], [116.0, 1474.0], [117.0, 1500.6093749999998], [118.0, 1855.2407407407404], [119.0, 2940.7090909090916], [120.0, 2486.6000000000004], [121.0, 1926.4782608695652], [122.0, 2090.765625], [123.0, 2171.2957746478874], [124.0, 1248.4166666666667], [125.0, 1841.2295081967209], [126.0, 2465.7727272727275], [127.0, 2298.0555555555557], [128.0, 1423.5], [129.0, 1668.1250000000002], [130.0, 1835.0882352941178], [131.0, 1811.7222222222215], [132.0, 1837.9692307692308], [133.0, 2776.118421052632], [134.0, 2185.111111111112], [135.0, 2087.741935483871], [136.0, 2557.057142857144], [137.0, 1513.1624999999997], [138.0, 2039.8000000000002], [139.0, 2230.246153846154], [140.0, 1904.1594202898546], [141.0, 2447.2727272727275], [142.0, 1951.2307692307695], [143.0, 2453.185714285715], [144.0, 2212.915492957748], [145.0, 2325.8461538461543], [146.0, 1789.3870967741937], [147.0, 3348.782608695652], [148.0, 2333.2372881355936], [149.0, 2596.8723404255315], [150.0, 1563.7627118644068], [151.0, 2591.014084507041], [152.0, 2473.396551724138], [153.0, 2487.2499999999995], [154.0, 2756.970588235294], [155.0, 3153.476923076923], [156.0, 2305.333333333333], [157.0, 2471.0967741935483], [158.0, 1403.6769230769225], [159.0, 2028.967741935485], [160.0, 1828.3965517241377], [161.0, 2576.924242424243], [162.0, 2250.571428571429], [163.0, 2438.2786885245905], [164.0, 2857.500000000001], [165.0, 2206.3823529411766], [166.0, 3490.3278688524597], [167.0, 2911.2666666666655], [168.0, 2512.6721311475408], [169.0, 2189.813559322034], [170.0, 2836.6212121212125], [171.0, 2788.983606557377], [172.0, 1793.1791044776116], [173.0, 2545.694915254238], [174.0, 42063.0], [1.0, 5268.0]], "isOverall": false, "label": "VerifyRoutingNumber - Not Found", "isController": false}, {"data": [[89.76694833877447, 1442.3455924716711]], "isOverall": false, "label": "VerifyRoutingNumber - Not Found-Aggregated", "isController": false}, {"data": [[2.0, 130.2857142857143], [3.0, 117.60000000000001], [4.0, 110.1875], [5.0, 109.99999999999999], [6.0, 124.875], [7.0, 109.81481481481481], [8.0, 100.08823529411765], [9.0, 106.79411764705883], [10.0, 126.77142857142857], [11.0, 105.0], [12.0, 110.4888888888889], [13.0, 114.56862745098039], [14.0, 104.53703703703701], [15.0, 109.58620689655173], [16.0, 108.90322580645163], [17.0, 104.2941176470588], [18.0, 116.10937499999997], [19.0, 159.61290322580646], [20.0, 129.59677419354838], [21.0, 125.23188405797103], [22.0, 123.29411764705884], [23.0, 151.7222222222222], [24.0, 152.0476190476191], [25.0, 134.7820512820513], [26.0, 149.31081081081084], [27.0, 150.12328767123293], [28.0, 161.08333333333331], [29.0, 195.24285714285716], [30.0, 182.3857142857143], [31.0, 171.99999999999994], [32.0, 179.13636363636365], [33.0, 184.85294117647064], [34.0, 227.103448275862], [35.0, 222.93103448275858], [36.0, 207.60869565217394], [37.0, 192.89552238805965], [38.0, 241.10344827586206], [39.0, 219.59999999999997], [40.0, 234.14492753623193], [41.0, 203.2941176470588], [42.0, 194.9117647058824], [43.0, 207.19696969696963], [44.0, 238.58571428571423], [45.0, 235.5797101449276], [46.0, 251.96000000000004], [47.0, 313.15], [48.0, 416.87096774193554], [49.0, 531.8611111111111], [50.0, 292.9516129032257], [51.0, 308.909090909091], [52.0, 267.8987341772152], [53.0, 285.13513513513516], [54.0, 306.985294117647], [55.0, 404.9814814814815], [56.0, 258.7922077922079], [57.0, 361.34000000000003], [58.0, 618.8695652173914], [59.0, 242.6031746031746], [60.0, 348.2222222222221], [61.0, 363.75], [62.0, 217.19298245614036], [63.0, 351.13095238095235], [64.0, 298.35937499999994], [65.0, 288.34666666666675], [66.0, 360.13846153846146], [67.0, 278.0410958904109], [68.0, 334.0985915492958], [69.0, 291.80555555555566], [70.0, 283.17142857142846], [71.0, 352.88888888888886], [72.0, 380.2337662337663], [73.0, 302.5079365079365], [74.0, 430.7999999999999], [75.0, 350.4242424242425], [76.0, 301.3823529411765], [77.0, 302.06666666666666], [78.0, 191.86274509803917], [79.0, 333.86792452830196], [80.0, 298.65714285714273], [81.0, 370.37777777777774], [82.0, 305.6666666666667], [83.0, 303.0294117647059], [84.0, 352.4794520547946], [85.0, 411.21052631578965], [86.0, 296.4722222222223], [87.0, 358.8387096774195], [88.0, 339.5614035087718], [89.0, 268.2203389830509], [90.0, 360.10169491525426], [91.0, 308.0], [92.0, 419.1199999999999], [93.0, 287.5396825396825], [94.0, 291.737704918033], [95.0, 317.19047619047626], [96.0, 375.08823529411774], [97.0, 318.36206896551727], [98.0, 341.72463768115927], [99.0, 341.82352941176475], [100.0, 339.9242424242424], [101.0, 369.00000000000017], [102.0, 307.35483870967744], [103.0, 311.9696969696969], [104.0, 369.9402985074626], [105.0, 467.4925373134328], [106.0, 332.1641791044776], [107.0, 357.08064516129025], [108.0, 413.1363636363637], [109.0, 349.20000000000005], [110.0, 321.3333333333334], [111.0, 336.225806451613], [112.0, 436.4754098360655], [113.0, 408.7796610169491], [114.0, 316.18], [115.0, 471.0799999999999], [116.0, 472.6774193548386], [117.0, 437.52238805970165], [118.0, 451.77777777777766], [119.0, 597.811320754717], [120.0, 557.8805970149258], [121.0, 436.6666666666665], [122.0, 380.5333333333334], [123.0, 367.2580645161291], [124.0, 470.08771929824553], [125.0, 429.55357142857133], [126.0, 372.29850746268653], [127.0, 351.85294117647044], [128.0, 364.94520547945206], [129.0, 355.7796610169491], [130.0, 372.7160493827161], [131.0, 383.5970149253732], [132.0, 284.24074074074065], [133.0, 553.9710144927536], [134.0, 391.48611111111114], [135.0, 318.13725490196083], [136.0, 468.0869565217391], [137.0, 414.2533333333333], [138.0, 483.7068965517241], [139.0, 335.14516129032256], [140.0, 453.87500000000006], [141.0, 437.1666666666667], [142.0, 398.26415094339615], [143.0, 370.2857142857143], [144.0, 378.6056338028169], [145.0, 357.60975609756105], [146.0, 492.68181818181813], [147.0, 398.4590163934426], [148.0, 516.3064516129031], [149.0, 516.245614035088], [150.0, 319.5762711864407], [151.0, 380.6986301369863], [152.0, 402.5909090909092], [153.0, 524.7804878048782], [154.0, 358.1551724137932], [155.0, 438.9180327868852], [156.0, 413.77049180327873], [157.0, 421.6603773584905], [158.0, 397.8571428571428], [159.0, 342.08196721311486], [160.0, 400.06666666666666], [161.0, 453.22580645161287], [162.0, 738.3561643835615], [163.0, 437.05172413793116], [164.0, 329.54166666666674], [165.0, 320.8548387096774], [166.0, 388.9180327868852], [167.0, 438.31746031746025], [168.0, 421.70769230769235], [169.0, 683.8644067796612], [170.0, 478.9000000000001], [171.0, 316.0689655172412], [172.0, 390.22535211267626], [173.0, 537.3137254901961], [174.0, 977.0], [1.0, 155.5]], "isOverall": false, "label": "VerifyRoutingNumber - Success", "isController": false}, {"data": [[90.0825947209505, 325.80120775299486]], "isOverall": false, "label": "VerifyRoutingNumber - Success-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 174.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 49692.3, "minX": 1.68904242E12, "maxY": 98778.35, "series": [{"data": [[1.6890426E12, 56985.88333333333], [1.68904242E12, 77357.5], [1.68904254E12, 98778.35], [1.68904248E12, 96768.65]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6890426E12, 49692.3], [1.68904242E12, 67572.46666666666], [1.68904254E12, 86295.78333333334], [1.68904248E12, 84529.68333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6890426E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 162.85696568830093, "minX": 1.68904242E12, "maxY": 2896.85568120625, "series": [{"data": [[1.6890426E12, 2896.85568120625], [1.68904242E12, 339.1303990127519], [1.68904254E12, 1866.7687074829926], [1.68904248E12, 1004.9308983218165]], "isOverall": false, "label": "VerifyRoutingNumber - Not Found", "isController": false}, {"data": [[1.6890426E12, 444.7782963827311], [1.68904242E12, 162.85696568830093], [1.68904254E12, 393.28074694140446], [1.68904248E12, 319.40885072655317]], "isOverall": false, "label": "VerifyRoutingNumber - Success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6890426E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 162.8412567176519, "minX": 1.68904242E12, "maxY": 2874.201400107702, "series": [{"data": [[1.6890426E12, 2874.201400107702], [1.68904242E12, 339.1139448786509], [1.68904254E12, 1866.7651441528967], [1.68904248E12, 1004.9243172096109]], "isOverall": false, "label": "VerifyRoutingNumber - Not Found", "isController": false}, {"data": [[1.6890426E12, 444.77479579930014], [1.68904242E12, 162.8412567176519], [1.68904254E12, 393.2781712813909], [1.68904248E12, 319.4042272126811]], "isOverall": false, "label": "VerifyRoutingNumber - Success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6890426E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.68904242E12, "maxY": 2272.2886375875023, "series": [{"data": [[1.6890426E12, 2272.2886375875023], [1.68904242E12, 166.67215137803376], [1.68904254E12, 1304.3330093942332], [1.68904248E12, 594.3474827245813]], "isOverall": false, "label": "VerifyRoutingNumber - Not Found", "isController": false}, {"data": [[1.6890426E12, 0.0], [1.68904242E12, 0.0], [1.68904254E12, 0.0], [1.68904248E12, 0.0]], "isOverall": false, "label": "VerifyRoutingNumber - Success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6890426E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 87.0, "minX": 1.68904242E12, "maxY": 36584.0, "series": [{"data": [[1.6890426E12, 36584.0], [1.68904242E12, 3793.0], [1.68904254E12, 25569.0], [1.68904248E12, 22288.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6890426E12, 3604.2000000000007], [1.68904242E12, 413.0], [1.68904254E12, 2319.000000000002], [1.68904248E12, 1463.1999999999998]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6890426E12, 21217.019999999997], [1.68904242E12, 1343.4299999999985], [1.68904254E12, 8556.539999999894], [1.68904248E12, 3994.9199999999983]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6890426E12, 7557.45], [1.68904242E12, 458.0], [1.68904254E12, 3928.199999999997], [1.68904248E12, 1894.5999999999995]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6890426E12, 161.0], [1.68904242E12, 87.0], [1.68904254E12, 99.0], [1.68904248E12, 103.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6890426E12, 532.0], [1.68904242E12, 204.0], [1.68904254E12, 476.0], [1.68904248E12, 412.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6890426E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 127.5, "minX": 2.0, "maxY": 42063.0, "series": [{"data": [[2.0, 297.0], [3.0, 15213.0], [4.0, 8229.5], [5.0, 15197.0], [10.0, 148.5], [13.0, 11280.5], [15.0, 175.0], [16.0, 1264.5], [17.0, 179.0], [20.0, 7217.0], [25.0, 267.0], [28.0, 170.5], [30.0, 137.0], [35.0, 176.0], [43.0, 175.0], [44.0, 682.5], [45.0, 743.0], [50.0, 602.0], [51.0, 894.0], [52.0, 165.0], [55.0, 176.0], [59.0, 305.0], [62.0, 286.0], [64.0, 127.5], [71.0, 170.0], [70.0, 429.0], [72.0, 212.0], [75.0, 176.0], [73.0, 435.0], [77.0, 494.0], [76.0, 561.0], [81.0, 367.0], [80.0, 744.0], [86.0, 433.0], [84.0, 413.5], [85.0, 683.0], [87.0, 468.0], [89.0, 339.0], [91.0, 233.5], [88.0, 526.5], [90.0, 666.0], [94.0, 209.0], [95.0, 305.0], [92.0, 391.5], [93.0, 630.5], [99.0, 497.0], [98.0, 466.0], [97.0, 474.0], [96.0, 466.0], [103.0, 282.5], [100.0, 435.5], [101.0, 385.5], [102.0, 456.0], [106.0, 343.0], [105.0, 418.0], [104.0, 426.0], [107.0, 523.5], [109.0, 272.0], [111.0, 352.0], [110.0, 399.5], [108.0, 474.5], [114.0, 288.5], [112.0, 319.5], [115.0, 321.0], [113.0, 410.5], [117.0, 212.5], [118.0, 356.5], [119.0, 408.0], [116.0, 462.0], [120.0, 329.0], [123.0, 242.5], [121.0, 312.0], [127.0, 258.0], [126.0, 409.5], [125.0, 437.0], [124.0, 448.0], [130.0, 194.0], [132.0, 385.0], [137.0, 380.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[104.0, 42063.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 137.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 15213.0, "series": [{"data": [[2.0, 295.0], [3.0, 15213.0], [4.0, 8229.5], [5.0, 15197.0], [10.0, 148.5], [13.0, 11280.5], [15.0, 175.0], [16.0, 1264.5], [17.0, 179.0], [20.0, 7217.0], [25.0, 267.0], [28.0, 170.5], [30.0, 137.0], [35.0, 176.0], [43.0, 175.0], [44.0, 682.5], [45.0, 743.0], [50.0, 602.0], [51.0, 894.0], [52.0, 164.5], [55.0, 176.0], [59.0, 305.0], [62.0, 286.0], [64.0, 127.5], [71.0, 170.0], [70.0, 429.0], [72.0, 212.0], [75.0, 176.0], [73.0, 435.0], [77.0, 494.0], [76.0, 561.0], [81.0, 367.0], [80.0, 744.0], [86.0, 433.0], [84.0, 413.5], [85.0, 683.0], [87.0, 468.0], [89.0, 339.0], [91.0, 233.5], [88.0, 526.5], [90.0, 666.0], [94.0, 209.0], [95.0, 305.0], [92.0, 391.5], [93.0, 630.5], [99.0, 497.0], [98.0, 466.0], [97.0, 474.0], [96.0, 466.0], [103.0, 282.5], [100.0, 435.0], [101.0, 385.5], [102.0, 456.0], [106.0, 343.0], [105.0, 418.0], [104.0, 426.0], [107.0, 523.5], [109.0, 272.0], [111.0, 352.0], [110.0, 399.5], [108.0, 474.5], [114.0, 288.5], [112.0, 319.5], [115.0, 321.0], [113.0, 410.5], [117.0, 212.5], [118.0, 356.5], [119.0, 408.0], [116.0, 462.0], [120.0, 329.0], [123.0, 242.5], [121.0, 312.0], [127.0, 258.0], [126.0, 409.5], [125.0, 437.0], [124.0, 448.0], [130.0, 194.0], [132.0, 385.0], [137.0, 380.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[104.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 137.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 57.1, "minX": 1.68904242E12, "maxY": 104.05, "series": [{"data": [[1.6890426E12, 57.1], [1.68904242E12, 81.58333333333333], [1.68904254E12, 104.05], [1.68904248E12, 101.95]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6890426E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68904242E12, "maxY": 103.21666666666667, "series": [{"data": [[1.6890426E12, 59.5], [1.68904242E12, 80.83333333333333], [1.68904254E12, 103.21666666666667], [1.68904248E12, 101.11666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6890426E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6890426E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68904242E12, "maxY": 51.766666666666666, "series": [{"data": [[1.6890426E12, 28.566666666666666], [1.68904242E12, 40.31666666666667], [1.68904254E12, 51.766666666666666], [1.68904248E12, 50.46666666666667]], "isOverall": false, "label": "VerifyRoutingNumber - Success-success", "isController": false}, {"data": [[1.6890426E12, 0.016666666666666666]], "isOverall": false, "label": "VerifyRoutingNumber - Not Found-failure", "isController": false}, {"data": [[1.6890426E12, 30.933333333333334], [1.68904242E12, 40.516666666666666], [1.68904254E12, 51.45], [1.68904248E12, 50.65]], "isOverall": false, "label": "VerifyRoutingNumber - Not Found-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6890426E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.68904242E12, "maxY": 103.21666666666667, "series": [{"data": [[1.6890426E12, 59.5], [1.68904242E12, 80.83333333333333], [1.68904254E12, 103.21666666666667], [1.68904248E12, 101.11666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6890426E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6890426E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

